
var bcrypt = require('bcrypt-nodejs');
var jwt = require('jsonwebtoken');
var jwtTokenSecret = 'hangman';
var squel = require("squel");

var db = require('iConnectdb_ktc.js');
var ipm = new db.im2(db.get_configdb_tcp());
var utl = require('Utility.js');
var db_config = "master_config";
var db_sugarcane = "sugarcane_kumpawapi";

function Isauthenticate(req, res,next)
{
    debugger;
    var token = req.body.token || req.query.token || req.headers['x-access-token'];

    // decode token
    if (token)
    {
        // verifies secret and checks exp
        //var key ='hangman' 
        //App.get('jwtTokenSecret')
        jwt.verify(token, jwtTokenSecret, function (err, decoded) {
            if (err) {
                if (err.message == 'jwt expired') {
                    //  res.end('Access token has expired', 400);
                    return res.json({ success: false, message: 'Access token has expired' });
                }
                else {
                    return res.json({ success: false, message: 'Failed to authenticate token.' });
                }
            }
            else {
                // if everything is good, save to request for use in other routes
                req.decoded = decoded;
                next();
            }
        });

    }
    else
    {

        if (req.originalUrl == '/api/get_login')//'/api/authenticate'
        {
            next();
        }
        else
        {
            // if there is no token
            // return an error
            return res.status(403).send({
                success: false,
                message: 'No token provided.'
            });
        }

    }
}


function encode_pws(pws, callback)
{
    bcrypt.hash(pws, null, null, function (err, hash) {
        // Store hash in your password DB.
        //console.log(hash);
        callback(hash);
        return;
    });
}

function decode_pws(pws, hash, callback)
{
    bcrypt.compare(pws, hash, function (err, res) {
        // res === true
        // console.log(res);
        callback(res);
        return;
    });
}

//https://scotch.io/tutorials/authenticate-a-node-js-api-with-json-web-tokens
function authenticate(req, res)
{
   //console.log(req.body.user);
   // req.body.password
    debugger;
   // var user = 'demo1'
  //  var pwd = '1234';
    var user = req.body.user;
    var pwd = req.body.pass;

    //var token = jwt.sign(user, key, {
    //    expiresInMinutes: 1440 // expires in 24 hours
    //});

    var sql = "SELECT id,password as hash,token,get_rolename(role_id::int)as role  FROM users_login WHERE username=" + utl.sqote(user);//+ " AND password=" + utl.sqote(pwd);
    ipm.db.dbname = db_sugarcane;
    db.get_rows(ipm, sql, function (rows)
    {

        // if user is found and password is right
        // create a token
        if (rows.length > 0)
        {
            var hash = rows[0].hash;
            decode_pws(pwd, hash, function (xres)
            {
                    debugger;
                    // console.log(xres);
                    if (xres == true)
                    {
                        var token = jwt.sign({ user: user }, jwtTokenSecret, { expiresIn: '1d' });

                        var result = {
                            success: true,
                            message: 'Pass to authenticate token.',
                            fleetname: 'kmp',
                            fleetid: 'db_10003',
                            user_id : rows[0].id,
                            role: rows[0].role,
                            token: token
                        };

                        var sql = "UPDATE users_login SET token=" + utl.sqote(token) + " WHERE id=" + utl.sqote(rows[0].id) + ";";
                        ipm.db.dbname = db_sugarcane;
                        db.excute(ipm, sql, function (is_ok) {
                            res.send(result);
                        });
                    }
                    else
                    {
                        res.json({ success: false, message: 'Authentication failed. Wrong password.' });
                    }
                });

        } else {
            // res.send(object);
            return res.json({ success: false, message: 'Failed to authenticate token.' });
        }
    });


}

function add_userlogin(req, res)
{
    var b = req.body;
    var ar={'username':b.username,'password':b.password,'factory_id':b.factory_id,'role_id':b.role_id};
  // var ar={'username':'demo1','password':'1234','factory_id':'1','role_id':'1'};

    encode_pws(ar.password, function (hash) 
    {
        debugger;
        var sql = squel.insert()
        .into("users_login")
        .set("username", ar.username)
        .set("password", hash)
        .set("factory_id", ar.factory_id)
        .set("role_id", ar.role_id)
        .toString();

        excute(sql,db_sugarcane,function(xres)
        {
            res.send(xres);
        })

    });
 
}

function set_userlogin(req, res)
{
    var b = req.body;
    var ar={'username':b.username,'password':b.password,'factory_id':b.factory_id,'role_id':b.role_id, 'user_id':b.user_id};
    //var ar={'username':'demo1','password':'1234','factory_id':'1','role_id':'1', 'user_id':'1'};
   
    encode_pws(ar.password, function (hash) 
    {

    var sql = squel.update()
    .table("users_login")
    .set("username", ar.username)
    .set("password", hash)
    .set("factory_id", ar.factory_id)
    .set("role_id", ar.role_id)
    .where('id = ' + utl.sqote(ar.user_id))
    .toString();

        excute(sql,db_sugarcane,function(xres)
        {
            res.send(xres);
        })
  });
}

function del_userlogin(req, res)
{
     //  var b = req.body;
    var ar={'user_id':req.body.user_id};
  //  var ar={'user_id':'1'};
    var sql="DELETE FROM users_login WHERE id ="+utl.sqote(ar.user_id);
    excute(sql,db_sugarcane,function(xres)
    {
        res.send(xres);
    })
}

function list_factory(req, res)
{
    var sql="SELECT * FROM ms_factory_login";
    nrows(sql,db_sugarcane,function  (rows){ res.send( rows); });
}

function list_role(req, res)
{
    var sql="SELECT * FROM ms_role";
    nrows(sql,db_sugarcane,function  (rows){ res.send( rows); });
}

function logout(req, res)
{
    Isauthenticate(req, res, function ()
    {
        debugger;
        // console.log('tracking_realtime ' + req.body.fleetid);
     var ar = { "db_name": req.body.fleetid, 'user_id': req.body.user_id };
      //  var object = { "db_name": 'db_10001', 'fleetname': 'demoktc' };
        var sql = '';
    //    sql += " SELECT id,fleetid,fleetname FROM users_login WHERE id= " + utl.sqote(object.id_user);
    //    ipm.db.dbname = db_config;
     //   db.get_rows(ipm, sql, function (rows)
     //   {
    //        if (rows.length > 0)
     //       {
                var sql = "UPDATE users_login SET token='' WHERE id=" + utl.sqote(ar.user_id) + ";";
                ipm.db.dbname = db_sugarcane;
                db.excute(ipm, sql, function (is_ok) {
                    res.json({ success: true, message: 'Completed logout.' });
                });
          
    //        }
     //       else
    //        {
    //            return res.json({ success: false, message: 'Failed to logout.' });
    //        }

    //    });
    });
}

function excute(sql,db_con,callback)
{
     ipm.db.dbname = db_con;
     db.excute(ipm, sql, function (response) 
     {
        if (response == 'oK') 
        {
           callback(true);
          return;
        }
        else
        {
          callback(false);
          return;
        }
     });

}

function nrows(sql,db_name,callback)
{
    ipm.db.dbname = db_name;
    db.get_rows(ipm, sql, function (rows) 
    {
        if (rows.length > 0)
        {
           callback(rows);
           return;
        }else{
            callback([]);
           return;
        }
    });
}

exports.authenticate = authenticate;
exports.add_userlogin = add_userlogin;
exports.set_userlogin =set_userlogin;
exports.del_userlogin = del_userlogin;

exports.Isauthenticate = Isauthenticate;
exports.list_factory = list_factory;
exports.list_role = list_role;
exports.logout = logout;

//add_userlogin('','');
//authenticate('','');
//set_userlogin('','');