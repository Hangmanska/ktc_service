
var timespan = require('timespan');
var moment = require('moment');

var utl = require('Utility.js');

function diff_second(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    //var diff = ts.totalMinutes().toFixed(2);
    //var diff2 = ts.totalDays().toFixed(2);
    var allsec = ts.totalSeconds();
    //  var allsec = utcp.iDateDiff(d1, d2,'seconds');
    // console.log(allsec);
    return allsec;
}

function set_format(data) {
  return  moment(data).format("YYYY-MM-DD HH:mm:ss")
}

function diff_day(from_date, to_date) { /*
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);

    var x = timespan.fromSeconds(ts.totalSeconds());  //
    //var diff = ts.totalMinutes().toFixed(2);
    var day = parseInt(x.days);
    */
    var start = moment(format_unix_date(from_date, 'YYYY-MM-DD'))
    var end = moment(format_unix_date(to_date, 'YYYY-MM-DD'))


    var day = end.diff(start, "days");

    // console.log(allsec);
    return day;
}

function diff_min(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var min = parseInt(ts.totalMinutes());
    // var day = parseInt(ts.totalDays());

    // console.log(allsec);
    return min;
}

function total_second(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:22:13'
    var ts = timespan.fromDates(d1, d2);
    var allsec = ts.totalSeconds()
    return allsec;
}

function total_minute_loop(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var allmin = parseInt(ts.totalMinutes()) + 1;
    return allmin;
}

function add_second(from_date, sec) {
    //2014-12-04 21:52:57
    var t = dateAdd(from_date, 'second', sec);
    t = utl.format_time(t);
    return t;
}

function dateAdd(date, interval, units) {
    var ret = new Date(date); //don't change original date
    switch (interval.toLowerCase()) {
        case 'year': ret.setFullYear(ret.getFullYear() + units); break;
        case 'quarter': ret.setMonth(ret.getMonth() + 3 * units); break;
        case 'month': ret.setMonth(ret.getMonth() + units); break;
        case 'week': ret.setDate(ret.getDate() + 7 * units); break;
        case 'day': ret.setDate(ret.getDate() + units); break;
        case 'hour': ret.setTime(ret.getTime() + units * 3600000); break;
        case 'minute': ret.setTime(ret.getTime() + units * 60000); break;
        case 'second': ret.setTime(ret.getTime() + units * 1000); break;
        default: ret = undefined; break;
    }
    return ret;
}

function format_unix_date(dt, format) {
    return moment(dt).format(format);
}

function sec2hhmmss(sec) {
    var ts = timespan.fromSeconds(sec); //90
    //debugger;
    //console.log(ts.seconds()); // 30
    //console.log(ts.minutes()); // 1
    //var s =
    var s = ts.hours + ':' + ts.minutes + ':' + ts.seconds;
    return s;
}


function min2hhmm(min) {
    var ts =timespan.fromMinutes(min);
    //debugger;
    //console.log(ts.seconds()); // 30
    //console.log(ts.minutes()); // 1
    //var s =

    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = '00:00';
        } else {
            result = ts.hours + ':' + ts.minutes ;
        }
    })

    return result;
}

function min2sec(min) {
    var ts = timespan.fromMinutes(min);
    //  console.log(ts);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.totalSeconds();
        }
    })

    return result;
}

function min2hr(min){
       var ts = timespan.fromMinutes(min);
    //  console.log(ts);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
             result = ts.hours;
        }
    })

    return result;
}

function sec2min(sec) {
    var ts = timespan.fromSeconds(sec);
    //  console.log(ts);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.totalMinutes()
        }
    })

    return result;
}

function HOUR(sec) {
    var ts = timespan.fromSeconds(sec);
    //  console.log(ts);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.hours;
        }
    })

    return result;
}

function MINUTE(sec) {
    var ts = timespan.fromSeconds(sec);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.minutes;
        }
    })

    return result;

}

function SECOND(sec) {
    var ts = timespan.fromSeconds(sec);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.seconds;
        }
    })

    return result;
}

function ymdhms(utime) {
     var s = moment(utime, 'YYYY-M-DD HH:mm:ss');
    //return moment(utime, 'YYYY-M-DD HH:mm:ss');
     return s;
}

function iso_to_ndate(uxdate) {
    var dt = uxdate.match(/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/);
    var s = dt[1] + '-' + dt[2] + '-' + dt[3] + ' ' + dt[4] + ':' + dt[5] + ':' + dt[6];
    return s;
}

exports.iso_to_ndate = iso_to_ndate;
exports.ymdhms = ymdhms;
exports.set_format = set_format;
exports.diff_second = diff_second;
exports.min2hr = min2hr;
exports.min2hhmm = min2hhmm;
exports.dateAdd = dateAdd;
    //http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object