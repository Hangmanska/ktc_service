
//#region modules

var async = require('async');
var squel = require("squel");
var timespan = require('timespan');

var utl = require('Utility.js');
var db = require('iConnectdb.js');
var utcp = require('Utility_tcp.js');
var linq = require('linq.js');
var mustache = require("mustache");


var pg_query = new db.im2(db.get_dbconfig_htt());

function diff_min(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var min = parseInt(ts.totalMinutes());
    // var day = parseInt(ts.totalDays());

    // console.log(allsec);
    return min;
}

function test() {
    db.get_rows(pg_query,'SELECT * FROM master_status_config ', function (res) {
        debugger;
        console.log(res);
    });
}

/*
 31 idle เริ่มจอดติดเครื่อง   32
  
 */
//#endregion

function check_history_status_havester(data,zone_data,callback) {
   
    find_insert(data.blackbox_id, data.r_status, function (result)
    {
        if (result.res == 0)
        {

            add_start_record_havester(data, zone_data, result.tb_name, function (res) {
                callback(res);
                return;
            });
        }
        else
        {
            debugger
            
            var xtotal_time = diff_min(result.res.start_record, data.r_time);
                    //console.log(res.id + ' ' + res.start_record);
                    data.id = result.res.id
                    data.total_time = xtotal_time;
                    update_start_record_havester(data, zone_data, result.tb_name, function (res) {
                        console.log(res);
                        callback(res);
                        return;
                    });
                  
        }
    });
}

function find_insert(blackbox_id, status_type, callback)
{
    var sql = ' ';
    var result = {'res':' ','tb_name':' '}
    status_type = parseInt(status_type);
    switch (status_type)
    {
        case 10 : { result.tb_name='history_status_havester' , sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start=" + utl.sqote(status_type) + " AND start_record  IS NOT NULL AND end_record IS  NULL"; }break;
        case 11: { result.tb_name = 'history_status_havester', sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start='10' AND start_record  IS NOT NULL AND end_record IS  NULL"; } break;
        //case '33': { sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start=" + utl.sqote(status_type) + " AND start_record  IS NOT NULL AND end_record IS  NULL"; } break;
            //case '34': { sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start='33' AND start_record  IS NOT NULL AND end_record IS  NULL"; } break;
        case 77: { result.tb_name = 'history_status_truck', sql = "SELECT id,idate(start_record) as start_record FROM history_status_truck  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start=" + utl.sqote(status_type) + " AND start_record  IS NOT NULL AND end_record IS  NULL"; } break;//loading truck
        case 88: { result.tb_name = 'history_status_havester', sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start=" + utl.sqote(status_type) + " AND start_record  IS NOT NULL AND end_record IS  NULL"; } break;//out_of_service harvest
        case 99: { result.tb_name = 'history_status_truck', sql = "SELECT id,idate(start_record) as start_record FROM history_status_truck  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start=" + utl.sqote(status_type) + " AND start_record  IS NOT NULL AND end_record IS  NULL"; } break;//out_of_service truck
    }
       
  
    db.get_rows(pg_query, sql, function (res) {
        debugger;
        // console.log(res);
        if (res.length > 0) {
            result.res = res[0];
            callback(result)
            return;
        } else {
            result.res = 0;
            callback(result)
            return;
        }
        return;
    });
}

function find_update(blackbox_id, status_type, callback)
{
    var sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type=" + utl.sqote(status_type) + " AND start_record IS NOT NULL ";
    db.get_rows(pg_query, sql, function (res) {
        debugger;
        // console.log(res);
        if (res.length > 0) {
            callback(res[0])
            return;
        } else {
            callback(0)
            return;
        }
        
    });
}

function add_start_record_havester(ar, zone_data,table_name, callback)
{
    var sql_insrt = squel.insert()
                   .into(table_name)
                   .set('blackbox_id', ar.blackbox_id)
                   .set('start_record', ar.r_time)
                   .set('start_lat', ar.lat)
                   .set('start_lon', ar.lon)
                   .set('status_type_start', ar.r_status)
                   .set('tambol_start', ar.tambol)
                   .set('amphur_start', ar.amphur)
                   .set('province_start', ar.province)
                   .set('date_record', utcp.now())
                   .set('plot_code_start', zone_data.plot_code)
                   .set('zone_id_start', zone_data.zone_id)
                   .toString();
    db.excute(pg_query, sql_insrt, function (res) {
        callback(res);
        return;
    });
}

function update_start_record_havester(ar,zone_data,table_name, callback)
{
    var sql_insrt = squel.update()
                   .table(table_name)
                   .set('end_record', ar.r_time)
                   .set('total_time', ar.total_time)
                   .set('end_lat', ar.lat)
                   .set('end_lon', ar.lon)
                   .set('tambol_end', ar.tambol)
                   .set('amphur_end', ar.amphur)
                   .set('province_end', ar.province)
                   .set('status_type_end', ar.r_status)
                   .set('plot_code_end', zone_data.plot_code)
                   .set('zone_id_end', zone_data.zone_id)
                   .where("id='" + ar.id + "'")
                   .toString();
    db.excute(pg_query, sql_insrt, function (res) {
        callback(res);
        return;
    });
}



//#region 

function check_history_status_havester31_32(data) {

    find_insert(data.blackbox_id, data.r_status, function (res) {
        if (res == 0) {
            add_start_record_havester(data, function (res) {
                console.log(res);
            });
        }
        else {
            debugger

            var xtotal_time = diff_min(res.start_record, data.r_time);
            //console.log(res.id + ' ' + res.start_record);
            data.id = res.id
            data.total_time = xtotal_time;
            update_start_record_havester(data, function (res) {
                console.log(res);
            });

        }
    });
}

function check_history_status_havester33_34(data) {

    find_insert(data.blackbox_id, data.r_status, function (res) {
        if (res == 0) {
            add_start_record_havester(data, function (res) {
                console.log(res);
            });
        }
        else {
            debugger

            var xtotal_time = diff_min(res.start_record, data.r_time);
            //console.log(res.id + ' ' + res.start_record);
            data.id = res.id
            data.total_time = xtotal_time;
            update_start_record_havester(data, function (res) {
                console.log(res);
            });

        }
    });
}

function _find_insert(blackbox_id, status_type, callback) {
    var sql = "SELECT id,idate(start_record) as start_record FROM history_status_havester  WHERE blackbox_id=" + utl.sqote(blackbox_id) + " AND status_type_start=" + utl.sqote(status_type) + " AND start_record  IS NOT NULL AND end_record IS  NULL";

    db.get_rows(pg_query, sql, function (res) {
        debugger;
        // console.log(res);
        if (res.length > 0) {
            callback(res[0])
            return;
        } else {
            callback(0)
            return;
        }
        return;
    });
}

//#endregion

//#region

/*
 
SELECT id FROM history_status_havester 
WHERE blackbox_id='8966181407448976987'
AND status_type='34'
AND start_record = NULL 


setTimeout(function () {
    // test();
   var  start = {
       'blackbox_id': '8966181407448970000', 'r_time': '2015-06-14 08:24:35', 'r_status': '33' //r_status2
      , 'tambol': 'เขาน้อย', 'amphur': 'ปราณบุรี', 'province': 'ประจวบคีรีขันธ์', 'lat': '12.379589', 'lon': '99.892066'
       , 'id': ' ', 'total_time': ' '
   }

  var end = {
      'blackbox_id': '8966181407448970000', 'r_time': '2015-06-25 23:33:19', 'r_status': '32' //r_status2
      , 'tambol': 'หัวสำโรง', 'amphur': 'แปลงยาว', 'province': 'ฉะเชิงเทรา', 'lat': '13.60741', 'lon': '101.32675'
      ,'id':' ','total_time':' '
   }

   // check_history_status_havester(start)
    // check_history_status_havester(end)

  //check_history_status_havester31_32(start)
    // check_history_status_havester31_32(end)
  check_history_status_havester33_34(start)

}, 1000);

  
 */
//#endregion

//#region
/*
setTimeout(function () {
    var s = { gis_id: "19,19,78,89", qt: "101719,101719,105413,105755" };
    s.gis_id =  s.gis_id.split(',') 
    s.qt = s.qt.split(',');
    debugger;

    var t = { 'gis_id': s.gis_id, 'qt': s.qt }

  //  var seq1 = linq.Enumerable.Range(1, 5).Select("{test:$}");
  //  var seq2 = linq.Enumerable.Range(3, 7).Select("{test:$}");
  //var x = seq1.Union(seq2, "$.test").Select("$.test")
  //  .ToArray();

  //console.log(x);

    var template_start = '{{#.}}"gis_id":{{gis_id}} ,"qt":{{qt}},{{/.}}';

    var s1 = mustache.render(template_start, s.gis_id);
    s1 = utl.iRmend(s1);


    //var t = linq.Enumerable.From(s.gis_id, s.qt)
    //.Select(function (x, y) { return { 'gis_id': x, 'qt': y } }) //, 'qt':x.qt
    //.ToArray();

    var t1 = linq.Enumerable.From(s.gis_id)
  .Select(function (x) { return { 'gis_id': x} }) //, 'qt':x.qt
  .ToArray();

    var t2 = linq.Enumerable.From(s.qt)
    .Select(function (x) { return {'qt': x } }) //, 'qt':x.qt
    .ToArray();

    var t = { 'gis_id': s.gis_id ,'qt':s.qt}

 //   t1.concat(t2);

    console.log(t);

}, 1000);
*/
    //#endregion

exports.check_history_status_havester = check_history_status_havester;