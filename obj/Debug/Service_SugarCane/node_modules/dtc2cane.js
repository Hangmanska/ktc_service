
//#region modules
var request = require('request');
var async = require('async');
//var url = "http://210.4.143.54:9002/";
//var url = "http://canemis.mitrphol.com/mpk/syncHarvestOrder/";
var url = "http://mpk-caneol.mitrphol.com/syncHarvestOrder/";
 

var mssql = require('iMssql_helper.js');
var utl = require('Utility.js');
var geolib = require('geolib');


var config =
 {
     server: 'mpk-caneol.mitrphol.com',//'127.0.0.1',
     user: 'htt-cl',//'sa',
     password: 'KoD3C93ZEj',//'1234',
     database: 'htt-cl'//'htt-cl-withdata'//'Test_Split'  
 }

var service_name = '';
var json_data = {};
var prefix = 'HTT';

var db = require('iConnectdb.js');
var pg_htt = new db.im2(db.get_dbconfig_htt());
var pg_realtime = new db.im2(db.get_dbconfig_realtime());

//#endregion
    //http://mpk-caneol.mitrphol.com/htt.log
//#region web_service

function saveHO(json_data,callback)
{

    var step1 = false; var step2 = false;
    try
    {
        console.log('generate ' + JSON.stringify(json_data));

        service_name = 'saveHo';
        send_data(service_name, json_data, function (res)
        {
            console.log(' response from save log ' + res);



            if (res != ' ')
            {
                update_log_ho(json_data, res, json_data.transactionId, function (xres) {
                    console.log(' save_log_ho ' + xres);
                    step2 = true;
                    do_final();
                });
            }
            else
            {
                console.log('!!!!! cannot get response from cane ' + res);
                step2 = true;
                do_final();
            
            }

        });

        save_log_ho(json_data, ' ', json_data.transactionId, function (xres) {
            console.log(' save_log_ho ' + xres);
            if (xres != ' ') {
                step1 = true;
                do_final();
            }
            else {
                step1 = true;
                do_final();
                console.log(' !! save_log_ho ' + xres);
            }

        });

        function do_final()
        {
            if (step1 == true && step2 == true)
            {
                callback('oK');
                return;
            }
        }
    
    }
    catch (err)
    {
        console.log('!!!! error_message when save ho' + err.message);
        callback('Err');
        return;
    }
}

function ReSend_saveHO(json_data, callback)
{

    var step1 = false; var step2 = false;
    try
    {
        console.log('re_generate ' + JSON.stringify(json_data));

        service_name = 'saveHo';
        send_data(service_name, json_data, function (res) {
            console.log(' response from save log ' + res);
            if (res != ' ') {
                update_log_ho(json_data, res, json_data.transactionId, function (xres) {
                    console.log(' save_log_ho ' + xres);
                    step2 = true;
                    do_final();
                });
            }
            else {
                console.log('!!!!! cannot get response from cane ' + res);
                step2 = true;
                do_final();

            }

        });

        save_log_ho(json_data, ' ', json_data.transactionId, function (xres) {
            console.log(' save_log_ho ' + xres);
            if (xres != ' ') {
                step1 = true;
                do_final();
            }
            else {
                step1 = true;
                do_final();
                console.log(' !! save_log_ho ' + xres);
            }

        });

        function do_final() {
            if (step1 == true && step2 == true) {
                callback('oK');
                return;
            }
        }

    }
    catch (err) {
        console.log('!!!! error_message when save ho' + err.message);
        callback('Err');
        return;
    }
}

function ReSend_save_log_ho(data_text, res_ponsecane, date_create, transac_id, callback)
{
    if (transac_id != ' ')
    {
       // data_text = JSON.stringify(data_text);
        //  
        debugger;
        var sql = "INSERT INTO save_ho_log_resend(data_text,response_from_cane,date_create,transaction_id) VALUES(" + utl.sqote(data_text) + "," + utl.sqote(res_ponsecane) + "," +  utl.sqote(date_create) + "," + utl.sqote(transac_id) + ")";
        iexcute(pg_htt, sql, function (pres) {
            if (pres == 'oK')
            {
                callback(pres);
                return;
            }
            else
            {
                console.log('something1 ' + sql);
                callback('oK');
                return;
            }
        })
    }
}

function update_log_ho(data_text, res_ponsecane, transac_id, callback)
{

    res_ponsecane = JSON.stringify(res_ponsecane);
    console.log(' UPDATE save_ho_log ' + res_ponsecane);
    var sql_update = "UPDATE save_ho_log SET response_from_cane=" + utl.sqote(res_ponsecane) + " WHERE transaction_id=" + utl.sqote(transac_id)
    iexcute(pg_htt, sql_update, function (pres) {
        if (pres == 'oK') {
            callback(pres);
            return;
        }
        else {
            console.log('something2 ' + sql_update);
            callback('oK');
            return;
        }
    })
}

function save_log_ho(data_text,res_ponsecane,transac_id,callback)
{
    if (res_ponsecane == ' ') {
        data_text = JSON.stringify(data_text);
        //  
        var sql = "INSERT INTO save_ho_log(data_text,response_from_cane,transaction_id) VALUES(" + utl.sqote(data_text) + "," + utl.sqote(res_ponsecane) + "," + utl.sqote(transac_id) + ")";
        iexcute(pg_htt, sql, function (pres) {
            if (pres == 'oK') {
                callback(pres);
                return;
            }
            else {
                console.log('something1 '+sql);
                callback('oK');
                return;
            }
        })
    }
   

}

function send_data(service_name, json_data,callback)
{
    var master_url = url + service_name;

    console.log(master_url);

    request({
        url: master_url,
        method: "POST",
        json: true,   // <--Very important!!!
        body: json_data
    }, function (error, response, body) {
        debugger;
        if (error)
        {
            console.log(error);
            callback(error);
            return;
        }
        //console.log(body);
        callback(body);
        return;
        //var response = { flag:true ,message :"สร้างใบสั่งตัด[HO5859MPK01/2] สำเร็จ"};
    });
}

    //#endregion

//#region sql-server realtime

//sql-server logs
function get_harvest_vehicle_working_log()
{
    //#region query sample
    /*
    SELECT 
    id
    ,get_harvester(blackbox_id) as harvest_vehicle_code
    ,idate(start_record) as start_time
    ,idate(end_record) as end_time
    ,working_status(status_type_start::int) as type
     FROM history_status_havester 
    WHERE is_send='0'
    AND end_record IS NOT NULL
    ORDER BY id
    */
    //#endregion

    var sql = " ";
    sql += "  SELECT id ";
    sql += " ,get_harvester(blackbox_id) as harvest_vehicle_code ";
    sql += ",idate(start_record) as start_time ";
    sql += ",idate(end_record) as end_time ";
    sql += " ,working_status(status_type_start::int) as type ";
    sql += "  FROM history_status_havester ";
    sql += " WHERE is_send='0' ";
    sql += " AND end_record IS NOT NULL ";
    sql += " ORDER BY id ";

    db.get_rows(pg_htt, sql, function (res) {
        debugger;
        // console.log(res);
        async.eachSeries(res, function (row, next) {
            var data = row.harvest_vehicle_code + ',' + row.start_time + ',' + row.end_time + ',' + row.type;
            set_harvest_vehicle_working_log(data, function (xres) {
                debugger;
                // console.log(xres);
                var sqlupdate = "UPDATE history_status_havester SET is_send='1' WHERE id=" + utl.sqote(row.id);
                iexcute(pg_htt, sqlupdate, function (pres) {
                    if (pres == 'oK') {
                        next();
                    }
                })

            })

        }, function () {
            console.log('finish send harvest_vehicle_working_log');
        })

    });

}


function set_harvest_vehicle_working_log(HarvestVehicleCode_StartTime_EndTime_Type, callback) {
    debugger;
    //@harvest_vehicle_code varchar(10), @start_time varchar(21), @end_time varchar(21), @type
    //"K003746,2015-06-13 20:46:43,2015-06-13 23:08:19,ENGINE_OFF"
    console.log("++++++++++++++ set_harvest_vehicle_working_log " + HarvestVehicleCode_StartTime_EndTime_Type + "+++++++++++++++++");
    mssql.nonquery2(config, 'HTT_Harvest_vehicle_working_log', 'harvest_vehicle_code,start_time,end_time,type', HarvestVehicleCode_StartTime_EndTime_Type, function (xres) {
        console.log('HTT_Harvest_vehicle_working_log '+xres);
        callback(xres);
    })
}


function set_harvest_vehicle_working_current(HarvestVehicleCode_StartTime_Type,callback)
{
    //[HTT_Harvest_vehicle_working_current] @harvest_vehicle_code varchar(10),@start_time varchar(21),@type
    debugger;
    //"K000006,2015-10-01 07:00,ENGINE_OFF"
    console.log("++++++++++++++ set_harvest_vehicle_working_current " + HarvestVehicleCode_StartTime_Type + "+++++++++++++++++");
    mssql.nonquery2(config, 'HTT_Harvest_vehicle_working_current', 'harvest_vehicle_code,start_time,type', HarvestVehicleCode_StartTime_Type, function (xres) {
        console.log('HTT_Harvest_vehicle_working_current '+xres);
        callback(xres);
        return;
    })
}


//sql-server logs
function get_delivery_vehicle_working_log() {
    //#region query sample
    /*
    SELECT 
    id
    ,get_truck(blackbox_id) as delivery_vehicle_code
    ,idate(start_record) as start_time
    ,idate(end_record) as end_time
    ,working_status(status_type_start::int) as type
    ,loading_harvest_vehicle_code
     FROM history_status_truck
    WHERE is_send='0'
    AND end_record IS NOT NULL
  AND get_truck(blackbox_id) IS NOT NULL 
    ORDER BY id
    */
    //#endregion

    var sql = " ";
    sql += " SELECT  id ";
    sql += " ,get_truck(blackbox_id) as delivery_vehicle_code ";
    sql += " ,idate(start_record) as start_time ";
    sql += " ,idate(end_record) as end_time ";
    sql += " ,working_status(status_type_start::int) as type ";
    sql += " ,loading_harvest_vehicle_code ";
    sql += "  FROM history_status_truck ";
     sql += "  WHERE is_send='0' ";
  //  sql += " WHERE get_ymd(start_record)='2016-03-18' "
    sql += "  AND end_record IS NOT NULL ";
    sql += "  AND get_truck(blackbox_id) IS NOT NULL ";
   // sql += " AND get_ymd(start_record)='2016-03-17' ";
  //  sql += "  AND loading_harvest_vehicle_code IS NOT NULL ";
    sql += "  ORDER BY id ";

    db.get_rows(pg_htt, sql, function (res)
    {
        debugger;
        // console.log(res);
        async.eachSeries(res, function (row, next) {
            var data = row.delivery_vehicle_code + ',' + row.start_time + ',' + row.end_time + ',' + row.type + ',' + row.loading_harvest_vehicle_code;
            set_delivery_vehicle_working_log(data, function (xres) {
                debugger;
                // console.log(xres);
                var sqlupdate = "UPDATE history_status_truck SET is_send='1' WHERE id=" + utl.sqote(row.id);
                iexcute(pg_htt, sqlupdate, function (pres) {
                    if (pres == 'oK') {
                        next();
                    }
                })

            })

        }, function () {
            console.log('finish send delivery_vehicle_working_log');
        })

    });

}


function set_delivery_vehicle_working_log(DeliveryVehicleCode_StartTime_EndTime_Type_LoadingHarvestVehicleCode, callback)
{
    debugger;
    //  @delivery_vehicle_code varchar(10),@start_time varchar(21),@end_time varchar(21),@type varchar(50)
    //EXEC  dbo.HTT_Delivery_vehicle_working_log 'K001001','2015-10-01 07:00:00.000','2015-10-01 07:10:00.000','ENGINE_ON'@harvest_vehicle_code varchar(10), @start_time varchar(21), @end_time varchar(21), @type
    console.log("++++++++++++++ set_delivery_vehicle_working_log " + DeliveryVehicleCode_StartTime_EndTime_Type_LoadingHarvestVehicleCode + "+++++++++++++++++");
    mssql.nonquery2(config, 'HTT_Delivery_vehicle_working_log', 'delivery_vehicle_code,start_time,end_time,type,loading_harvest_vehicle_code', DeliveryVehicleCode_StartTime_EndTime_Type_LoadingHarvestVehicleCode, function (xres) {
        console.log('HTT_Delivery_vehicle_working_log '+xres);
        callback(xres);
    })
}

function set_delivery_vehicle_working_current(DeliveryVehicleCode_StartTime_Type_Place_LoadingHarvestVehicleCode,callback)
{
    console.log("++++++++++++++ set_delivery_vehicle_working_current " + DeliveryVehicleCode_StartTime_Type_Place_LoadingHarvestVehicleCode + "+++++++++++++++++");
    //@delivery_vehicle_code varchar(10),@start_time varchar(21),@type varchar(50),@place varchar(50),@loading_harvest_vehicle_code varchar(50)
    mssql.nonquery2(config, 'HTT_Delivery_vehicle_working_current', 'delivery_vehicle_code,start_time,type,place,loading_harvest_vehicle_code', DeliveryVehicleCode_StartTime_Type_Place_LoadingHarvestVehicleCode, function (xres) {
        console.log('HTT_Delivery_vehicle_working_current '+xres);
        callback(xres);
        return;
    })
}


function set_delivery_vehicle_timestamp(Transaction_id_Timestamp_Column, callback)
{

    console.log("++++++++++++++ " + Transaction_id_Timestamp_Column + "+++++++++++++++++");
    mssql.nonquery2(config, 'HTT_Delivery_Vehicle_TimeStamp', 'transaction_id,time_stamp,column', Transaction_id_Timestamp_Column, function (xres) {
        // console.log(xres);
        callback('HTT_Delivery_Vehicle_TimeStamp '+xres);
        return;
    });
}


function set_harvester_cutting_timestamp(Transaction_id_Timestamp, callback) {

    console.log("++++++++++++++ " + Transaction_id_Timestamp + "+++++++++++++++++");
    mssql.nonquery2(config, 'HTT_Harvester_Cutting_TimeStamp', 'transaction_id,time_stamp', Transaction_id_Timestamp, function (xres) {
        // console.log(xres);
        callback('HTT_Harvester_Cutting_TimeStamp ' + xres);
        return;
    });
}

    //HTT_Delivery_Vehicle_TimeStamp_final
function set_harvester_cutting_timestamp_final(para_timestap, callback) {

    console.log("++++++++++++++ " + para_timestap + "+++++++++++++++++");
    mssql.nonquery2(config, 'HTT_Delivery_Vehicle_TimeStamp_final', 'transaction_id,cutting,farm_leaving,park_prepare,park_outside,park_inside,factory_leaving', para_timestap, function (xres) {
        // console.log(xres);
        callback('HTT_Harvester_Cutting_TimeStamp_final ' + xres);
        return;
    });
}


//#endregion

//distance
    //https://blogs.gentoo.org/titanofold/2011/05/01/postgis-users-rejoice/
    //http://www.manuel-bieh.de/publikationen/scripts/geolib/demo.html

function get_oil_harvester(start_time, callback)
{
    console.log(start_time);
    var sql = " ";
    sql += " SELECT harvester_name "
    sql += "  ,fuel_collect as amount_of_fuel "
    sql += " ,idate(date_report) as start_time  "
    sql += " ,avg_fuel as litre_per_hour "
    sql += "  FROM harvester_fuel_report "
    sql += " WHERE get_ymd(date_report)= "+utl.sqote(start_time);

    iget_row(pg_htt, sql, function (rows)
    {
        if (rows.length > 0)
        {
            async.eachSeries(rows, function (row, next) {
                var para_oil_harvester = row.harvester_name + ',' + row.amount_of_fuel + ',' + row.start_time + ',' + row.litre_per_hour;

                mssql.nonquery2(config, 'HTT_Harvest_vehicle_fuel', 'harvest_vehicle_code,amount_of_fuel,start_time,litre_per_hour', para_oil_harvester, function (xres)
                {
                    console.log(start_time + ' HTT_Harvest_vehicle_fuel ' + xres);
                    next();
                })
            }, function () {
                console.log('finish :)');
                callback(true);
                return;
            });
        } else {
            console.log('no data :)');
            callback(true);
            return;
        }
    });

}

function get_oil_truck(start_time, callback)
{
    console.log(start_time);
    var sql = " ";
    sql += " SELECT  "
    sql += " truck_name "
    sql += " ,fuel_collect as amount_of_fuel "
    sql += " ,idate(date_report) as start_time "
    sql += " ,avg_fuel as litre_per_hour "
    sql += " FROM truck_fuel_report "
    sql += " WHERE get_ymd(date_report)= " + utl.sqote(start_time);

    iget_row(pg_htt, sql, function (rows)
    {
        if (rows.length > 0)
        {
            async.eachSeries(rows, function (row, next)
            {
                var para_oil_truck = row.truck_name + ',' + row.amount_of_fuel + ',' + row.start_time + ',' + row.litre_per_hour;

                mssql.nonquery2(config, 'HTT_Delivery_vehicle_fuel', 'delivery_vehicle_code,amount_of_fuel,start_time,litre_per_hour', para_oil_truck, function (xres) {
                    console.log(start_time + ' HTT_Delivery_vehicle_fuel ' + xres);
                    next();
                })
            }, function () {
                console.log('finish :)');
                callback(true);
                return;
            });
        }
        else {
            console.log('no data :)');
            callback(true);
            return;
        }
    });
}

//htt_master_recnow.js
function set_harvest_order_displacement(transectionid, lon, lat, callback)
{

    var sql = "SELECT iarea_c_lon as lon,iarea_c_lat as lat FROM htt3 WHERE is_master=true;";
    iget_row(pg_htt, sql, function (rows) {
        if (rows.length > 0) {
            //callback();
            //return;
            var center_lon = rows[0].lon;
            var center_lat = rows[0].lat;

            var res = geolib.getDistance({ latitude: center_lat, longitude: center_lon }, { latitude: lat, longitude: lon });

            var mpk_displacement = geolib.convertUnit('km', res, 5);

            //transaction_id,mpk_displacement,mpv_displacement,mpl_displacement,mks_displacement
            var para_displacement = transectionid + ',' + mpk_displacement + ',0.0,0.0,0.0'
            console.log("++++++++++++++ set_harvest_order_displacement " + para_displacement + "+++++++++++++++++");
            mssql.nonquery2(config, 'HTT_harvest_order_displacement', 'transaction_id,mpk_displacement,mpv_displacement,mpl_displacement,mks_displacement', para_displacement, function (xres) {
                console.log('HTT_harvest_order_displacement ' + xres);
                callback(xres);
            })

            // console.log(x);
            // callback(x);
            //  return;
        } else {

            console.log("!!!! No Master In htt3 function set_harvest_order_displacement ");
            callback([]);
            return;
        }
    })
}


//inout_polygon.js
function set_harvest_order_distance(order_distance, callback)
{
    //HTT_Harvest_order_distance
    console.log("++++++++++++++ " + order_distance + "+++++++++++++++++");
    var para_order_distance = order_distance.transectionid + ',' + order_distance.miles;
    mssql.nonquery2(config, 'HTT_Harvest_order_distance', 'transaction_id,gps_tracked_distance', para_order_distance, function (xres) {
        console.log('HTT_Harvest_order_distance ' + xres);
        callback(xres);
    })

}


function iexcute(connection, sql, callback)
{
    db.excute(connection, sql, function (response) {
        if (response == 'oK') {
            // console.log('Update-Complete');
            callback(response);
            return;
        } else {
            console.log('Update-failed');
            callback(response);
            return;
        }
    });
}

function iget_row(connection, sql, callback) {
    db.get_rows(connection, sql, function (rows) {
        callback(rows);
        return;
    });
}

function get_truck_code(blackbox_id, callback) {
    var sql = "SELECT get_truck(" + utl.sqote(blackbox_id) + ")";
    db.get_rows(pg_htt, sql, function (res) {
        debugger;
        // console.log(res);
        if (res.length > 0) {
            if (res[0]['get_truck'] != null) {
                callback(res[0]['get_truck']);
                return;
            } else {
                console.log('dtc_to_cane not found truck_code');
                callback([]);
                return;
            }

        } else {
            callback([]);
            return;
        }
    });
}

function get_harvester_code(blackbox_id, callback) {
    var sql = "SELECT get_harvester(" + utl.sqote(blackbox_id) + ")";
    db.get_rows(pg_htt, sql, function (res) {
        debugger;
        // console.log(res);
        if (res.length > 0) {
            callback(res[0]['get_harvester']);
            return;
        } else {
            callback([]);
            return;
        }
    });
}

function get_manual() {
    var sql =" ";
    sql +="  SELECT ";
    sql += " get_bpcode(htt_plotcode) as bpcode, ";
    sql +="  htt_plotcode,  ";
    sql +="  htt_truck_name, ";
    sql +=" htt_harvester_name,  ";
    sql +="  htt_transectionid, ";
    sql += " idate( htt_cuttingtime) as htt_cuttingtime ";
    sql +="  FROM rec_now ";
    sql +="  WHERE htt_cuttingtime IS NOT NULL ";
    sql +="  AND to_char(now(), 'YYYY-MM-dd') = to_char(htt_cuttingtime, 'YYYY-MM-dd') ";
  //  sql +="  AND   dlget_res_cane(htt_transectionid) IS NULL AND htt_cuttingtime < '2016-01-19 10:15' AND htt_truck_name !='null' ";
    sql +=" AND htt_factorytime IS NOT NULL ";
    sql += " AND dlget_res_cane(htt_transectionid) IS NULL ";
    sql += "  ORDER BY htt_cuttingtime DESC ";

    iget_row(pg_realtime, sql, function (rows)
    {
        if (rows.length > 0)
        {
            async.eachSeries(rows, function (row, next)
            {
                debugger;
                var json_data = {
                 "companyCode": "MPK", "beYear": "5859"
                , "bpCode": row.bpcode
                , "plotCode": row.htt_plotcode
                , "dlvVehicleCode": row.htt_truck_name
                , "harvestVehicleCode": row.htt_harvester_name
                , "transactionId": row.htt_transectionid
                , "cuttingTimestamp": row.htt_cuttingtime
                }

                saveHO(json_data, function (res) {
                    if (res != ' ') {
                        console.log(res);
                        next();
                    }
                });

            }, function () {
                console.log('finish');
            });
        }
    });
}

//#region exports

exports.saveHO = saveHO;
exports.ReSend_saveHO = ReSend_saveHO;
exports.ReSend_save_log_ho = ReSend_save_log_ho;

exports.get_oil_harvester = get_oil_harvester;
exports.get_oil_truck = get_oil_truck;

exports.set_harvest_order_distance = set_harvest_order_distance;
exports.set_harvest_order_displacement = set_harvest_order_displacement;
exports.set_harvester_cutting_timestamp = set_harvester_cutting_timestamp;
exports.set_harvester_cutting_timestamp_final = set_harvester_cutting_timestamp_final;



exports.set_delivery_vehicle_timestamp = set_delivery_vehicle_timestamp;
exports.set_delivery_vehicle_working_current = set_delivery_vehicle_working_current;
exports.set_harvest_vehicle_working_current = set_harvest_vehicle_working_current;

exports.set_harvest_vehicle_working_log = set_harvest_vehicle_working_log;
exports.set_delivery_vehicle_working_log = set_delivery_vehicle_working_log;

exports.get_harvester_code = get_harvester_code;
exports.get_truck_code = get_truck_code;
exports.iexcute = iexcute;

exports.get_harvest_vehicle_working_log = get_harvest_vehicle_working_log;
exports.get_delivery_vehicle_working_log = get_delivery_vehicle_working_log;
exports.iexcute = iexcute;
    //#endregion


//#region test
   /*  
setTimeout(function () {
   // saveHO()
    //set_harvest_order_distance(10.2, function (re) {
    //    debugger;
    //    console.log(re);
    //});

    
    var json_data = {
        "companyCode": "MPK", "beYear": "5859"
        , "bpCode": "101250"
        , "plotCode": "101250008"
        , "dlvVehicleCode": "K005140"
        , "harvestVehicleCode": "K004802"
        , "transactionId": "20160119021534320"
        , "cuttingTimestamp": "2016-01-19 02:15:34"
    }

    //var json_data = { "companyCode": "MPK", "beYear": "5859", "bpCode": "101430", "plotCode": "101430049", "dlvVehicleCode": "K005134", "harvestVehicleCode": "K004802", "transactionId": "20151201191136969", "cuttingTimestamp": "2015-12-01 19:11:36" }

    //saveHO(json_data, function (res) {
    //    console.log(res);
    //});

    //set_harvest_vehicle_working_current();
    //  get_harvest_vehicle_working_log()
     get_delivery_vehicle_working_log();

    //set_harvest_order_displacement('20151110145114416', '102.132', '16.4749', function (res) {
    //    console.log(res);
    //});
    //var cane_para_timestap = "20151202022632007,2015-12-02 02:26:01,cutting_timestamp"
    //set_delivery_vehicle_timestamp(cane_para_timestap, function (xx) {
    //    console.log(xx);
    //})
    //  get_delivery_vehicle_working_log();
   // get_harvest_vehicle_working_log();
    //get_oil_harvester
    /*

    get_oil_truck('2016-01-25', function (xres) {

    });

    get_oil_harvester('2016-01-25', function (xres) {

    });
 
    // get_manual() 
}, 1000);
*/ 
    //#endregion

    //http://mpk-caneol.mitrphol.com/htt.log

/*
เรียนพี่หนึ่ง

จากการตรวจสอบข้อมูล และรายงานที่ใช้ข้อมูลจากระบบ HTT พบประเด็นดังนี้
Pass 1.	ประวัติการทำงานของรถตัด ยังไม่มี OUT_OF_SERVICE เนื่องจากได้รับแจ้งว่า HTT ได้ implement เรื่องรถเสียแล้ว แต่ผมไม่แน่ใจว่า หลังจาก implement แล้ว มีข้อมูลรถเสียแล้วรึยัง
2.	รถบรรทุก มีประวัติ OUT_OF_SERVICE แต่เป็นข้อมูล เดือน 10 ปี 2015
Pass 3.	ข้อมูล harvest_order_displacement ระยะขจัดจากจุดตัดถึงโรงงาน ส่งมาล่าสุด วันที่ 12 ม.ค.59 หลังจากนั้น ไม่มีข้อมูลเข้ามาเลย
Pass 4.	ข้อมูล delivery_vehicle_working_log ประวัติการทำงานรถบรรทุก ส่งมาล่าสุด 23 ธ.ค. 58 หลังจากนั้น ไม่มีข้อมูลเข้ามาเลย

ผมคิดว่า ถ้าหากแก้ 4 ข้อนี้แล้ว หลังจากนั้น หากมีพบความผิดปกติของข้อมูล ทางผมจะ follow ตามที่ Key users ของ MPK แจ้งความผิดปกติเป็นเคส ๆ ไปครับ

ขอแสดงความนับถือ

*/