


    //#region module
var schedule = require('node-schedule');
var async = require('async');
var moment = require('moment');
var mustache = require("mustache");
var utl = require('Utility.js');


debugger;
var db = require('iConnectdb.js');
var pg_htt = new db.im2(db.get_dbconfig_htt());
var pg_realtime = new db.im2(db.get_dbconfig_realtime());

var start_time = ' ';
var end_time = ' ';
    //#endregion



//http://www.postgresonline.com/journal/archives/44-Using-DbLink-to-access-other-PostgreSQL-Databases-and-Servers.html

function send2history_status_11cutting_77loading(callback)
{
    //#region
    /*

WITH xdata as(
SELECT 
idate(cutting_time::timestamp)as start_record
,idate(farm_leaving::timestamp)as end_record
,datediff('minute',cutting_time::timestamp,farm_leaving::timestamp) as total_time_truck
,get_cutting_time(split_part(match_harvester_truck,',',1),idate(cutting_time::timestamp),idate(farm_leaving::timestamp)) as total_time_cutting
,plot_code
,split_part(match_harvester_truck,',',2) as blackbox_id_truck
,harvester_name
,get_truck(split_part(match_harvester_truck,',',2)) as truck_name
,match_harvester_truck,get_zone_id(plot_code) as zone_id
,
replace(
replace(
get_location(split_part(match_harvester_truck,',',2),idate(cutting_time::timestamp),idate(farm_leaving::timestamp))::text
,'(','')
,')','') as xlocation
,idate(now()::timestamp) as date_record
FROM cut_to_crushtime_log 
WHERE left(farm_leaving,10) ='2015-12-21'
AND datediff('minute',cutting_time::timestamp,farm_leaving::timestamp) >0
AND match_harvester_truck !=' '
ORDER BY cutting_time ASC 
)

SELECT start_record,end_record
,total_time_truck,total_time_cutting
,plot_code,blackbox_id_truck,harvester_name,truck_name
,zone_id
,split_part(xlocation,',',1) as r_lat
,split_part(xlocation,',',2) as r_lon
,split_part(xlocation,',',3) as tambol
,split_part(xlocation,',',4) as amphur
,split_part(xlocation,',',5) as province
,date_record
 FROM xdata
     */
//#endregion

    var xdate_now = moment().subtract(1, "days").format("YYYY-MM-DD");

    console.log('send2history_status_11cutting_77loading '+xdate_now)

    var sql = "WITH xdata as( SELECT ";
    sql +="idate(cutting_time::timestamp)as start_record,idate(farm_leaving::timestamp)as end_record ";
    sql += ",datediff('minute',cutting_time::timestamp,farm_leaving::timestamp) as total_time_truck   ";
    sql += ",get_cutting_time(split_part(match_harvester_truck,',',1),idate(cutting_time::timestamp),idate(farm_leaving::timestamp)) as total_time_cutting "
    sql += ",plot_code,harvester_name,get_truck(split_part(match_harvester_truck,',',2)) as truck_name ";
    sql += ",split_part(match_harvester_truck,',',1) as blackbox_id_harvester ,split_part(match_harvester_truck,',',2) as blackbox_id_truck ";
    sql += ",match_harvester_truck,get_zone_id(plot_code) as zone_id ,idate(now()::timestamp) as date_record";
    sql += ",' ' as start_lat,' ' as start_lon ,' ' as tambol_start,' ' as amphur_start,'' as province_start,'' as date_record";
    sql += ",replace(replace(get_location(split_part(match_harvester_truck,',',2),idate(cutting_time::timestamp),idate(farm_leaving::timestamp))::text,'(',''),')','') as xlocation ";
    sql += " FROM cut_to_crushtime_log  ";
    sql += " WHERE left(farm_leaving,10) ='"+xdate_now+"'  "; //2016-03-17
    sql +=" AND datediff('minute',cutting_time::timestamp,farm_leaving::timestamp) >0 "
    sql +=" AND match_harvester_truck !=' ' "
    sql += "ORDER BY cutting_time ASC  )";

    sql += " SELECT start_record,end_record ";
    sql += " ,total_time_truck,total_time_cutting ";
    sql += " ,plot_code,blackbox_id_harvester,blackbox_id_truck,harvester_name,truck_name,zone_id ";
    sql += " ,split_part(xlocation,',',1) as start_lat ";
    sql += " ,split_part(xlocation,',',2) as start_lon ";
    sql += " ,split_part(xlocation,',',3) as tambol_start ";
    sql += " ,split_part(xlocation,',',4) as amphur_start ";
    sql += " ,split_part(xlocation,',',5) as province_start ";
    sql += " ,idate (now() :: TIMESTAMP) AS date_record ";
    sql += "  FROM xdata ";

    db.get_rows(pg_htt, sql, function (res) {
         debugger;
         if (res.length > 0) {

             debugger;
             var strMustache_truck = '{{#.}}';
             strMustache_truck += "('{{start_record}}','{{end_record}}','{{total_time_truck}}','{{start_lat}}','{{start_lon}}','{{blackbox_id_truck}}','77' ";
             strMustache_truck += ",'{{date_record}}','{{tambol_start}}','{{amphur_start}}','{{province_start}}','{{plot_code}}','{{zone_id}}','{{harvester_name}}'";
             strMustache_truck += "),";
             strMustache_truck += '{{/.}}';

             var strMustache_harvester = '{{#.}}';
             strMustache_harvester += "('{{start_record}}','{{end_record}}','{{total_time_cutting}}','{{start_lat}}','{{start_lon}}','{{blackbox_id_harvester}}','11' ";
             strMustache_harvester += ",'{{date_record}}','{{tambol_start}}','{{amphur_start}}','{{province_start}}','{{plot_code}}','{{zone_id}}','{{truck_name}}'";
             strMustache_harvester += "),";
             strMustache_harvester += '{{/.}}';

             var result_truck = mustache.render(strMustache_truck, res);
             result_truck = utl.iRmend(result_truck);
             var sql_truck = " INSERT INTO history_status_truck(start_record, end_record, total_time, start_lat, start_lon";
             sql_truck += ",blackbox_id, status_type_start, date_record, tambol_start, amphur_start, province_start, plot_code_start, zone_id_start,loading_harvest_vehicle_code) VALUES " + result_truck;

             var result_harvester = mustache.render(strMustache_harvester, res);
             result_harvester = utl.iRmend(result_harvester);
             var sql_harvester = " INSERT INTO history_status_havester(start_record, end_record, total_time, start_lat, start_lon";
             sql_harvester += ",blackbox_id, status_type_start, date_record, tambol_start, amphur_start, province_start, plot_code_start, zone_id_start,loading_truck_vehicle) VALUES " + result_harvester;


             db.excute(pg_htt, sql_truck, function (response)
             {
                 if (response == 'oK')
                 {
                     excute_harvester();
                 }
                 else
                 {
                     callback(true);
                     return;
                 }
             });


             function excute_harvester()
             {
                 db.excute(pg_htt, sql_harvester, function (response)
                 {
                     if (response == 'oK')
                     {
                         callback(true);
                         return;
                     }
                     else {
                         callback(true);
                         return;
                     }
                 });
             }



         } else {
             console.log('nodata Finished');
             callback(true);
             return;
         }
    });
}

exports.send2history_status_11cutting_77loading = send2history_status_11cutting_77loading;

//#region Test
/*
setTimeout(function ()
{
    debugger;
    var now_time = moment().format('YYYYMMDDHH');
    console.log(now_time);

    send2history_status_11cutting_77loading(function (xres) {

    });
   
    //test(function (xres)
    //{
    //    console.log(xres);
    //    console.log('Finished');
    //});
  
}, 1000);

*/

//#endregion