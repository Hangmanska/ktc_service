//#region module
var async = require('async');
var moment = require('moment');

var db = require('iConnectdb.js');
var pg_htt = new db.im2(db.get_dbconfig_htt());
var utl = require('Utility.js');

//#endregion module

function process_performance_harvester(start_date,callback)
{
    var sql="";
    sql+=" WITH res as( ";
    sql+=" SELECT harvester_number as vehicle_code ";
    sql+="	,blackbox_id ";
    //  sql += ",get_min_max_cutting_time(blackbox_id," + utl.sqote(start_date) + ") as x ";
    sql += ",get_min_maxtime_zrep_status(blackbox_id, " + utl.sqote(start_date) + ", '10') as x";
    sql+=" FROM htt4 ";
    sql+=" ) ";
    sql+=" SELECT  ";
    sql += " sum( get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30')::int/ 60) as run ";
    sql += " ,sum(get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'31')::int/ 60) as idle ";
    sql += " ,sum(get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'33')::int/ 60) as stop ";
    sql += " ,sum(round(get_cutting_time(blackbox_id,get_minmax_format(x::text,1),get_minmax_format(x::text,2))::int/ 60)) as cutting ";
    sql+=" FROM res ";
    sql+=" WHERE  length(x::varchar)>3 ";
    db.get_rows(pg_htt, sql, function (res) {
         debugger;
        if (res.length > 0)
        {
            var a = (parseInt( res[0].run) + parseInt( res[0].idle));
            var b = parseInt(res[0].cutting);
            var c = b / a;
            var percent_performance = (c * 100).toFixed(2);


          //  console.log(percent_performance);
            var data={'date':start_date,'stop':res[0].stop,'run':res[0].run,'idle':res[0].idle,'cut_load':res[0].cutting,'efficiency':percent_performance}
          
            var sql = "INSERT INTO history_performance_harvester (date,stop,idle,run,cut_load,efficiency) VALUES(" + utl.sqote(data.date) + "," + utl.sqote(data.stop) + "," + utl.sqote(data.idle) + "," + utl.sqote(data.run) + "," + utl.sqote(data.cut_load) + "," + utl.sqote(data.efficiency) + ") "
            db.excute(pg_htt, sql, function (response) {
                if (response == 'oK') {
                    callback(response);
                }
            });
        }
    });
}

function process_call_oil_harvester(start_date,callback)
{
  var sql= "  WITH res as( "
    sql+=" SELECT harvester_number as vehicle_code,blackbox_id "
    sql+=",get_min_maxtime_zrep_status(blackbox_id, "+utl.sqote(start_date)+",'10') as x "
    sql+=" FROM htt4 "
    sql+=" ) "

    sql += " SELECT '" + start_date + "' as date_report,vehicle_code as harvester_name";
    sql+=" ,round(get_cutting_time(blackbox_id,get_minmax_format(x::text,1),get_minmax_format(x::text,2))::int/ 60)* COALESCE(get_oilconfig1(vehicle_code)::int, 0) as fuel_collect ";
    sql += " ,round(get_cutting_time(blackbox_id,get_minmax_format(x::text,1),get_minmax_format(x::text,2))::int/ 60) as working_hour ";
    sql += " ,COALESCE(get_oilconfig1(vehicle_code)::int, 0) avg_fuel,'normal' as  status_fuel";
    sql+=" FROM res ";
    sql+=" WHERE length(x::varchar) > 3 ";

    db.get_rows(pg_htt, sql, function (rows)
    {
        debugger;
        if (rows.length > 0) {

            var str = " ";
            async.eachSeries(rows, function (row, next)
            {
                str += "(" + utl.sqote(row.date_report) + ',' + utl.sqote(row.harvester_name) + ',' + utl.sqote(row.fuel_collect) + ',' + utl.sqote(row.working_hour) + ',' + utl.sqote(row.avg_fuel) + ',' + utl.sqote(row.status_fuel) + "),"
                next();
            }, function () {
                debugger
                str = utl.iRmend(str);
                var sql = "INSERT INTO harvester_fuel_report (date_report,harvester_name,fuel_collect,working_hour,avg_fuel,status_fuel)  VALUES " + str;
                db.excute(pg_htt, sql, function (response)
                {
                    if (response == 'oK')
                    {
                        callback(response);
                    }
                });
            });

        } else {
           
            console.log('no data');
            callback(null);
        }
    });
}

function process_call_oil_truck(start_date, callback)
{
    
    var sql= "   WITH t as ( "

    sql+="  WITH res as( "
    sql+="  SELECT truck_number as vehicle_code "
    sql+="    ,blackbox_id "
    sql += " ,get_min_maxtime_zrep_status(blackbox_id," + utl.sqote(start_date) + ",'30')as run "
    sql += "  ,get_min_maxtime_zrep_status(blackbox_id," + utl.sqote(start_date) + ",'31')as idle "
    sql+="  FROM htt7 "
    sql+=" ) "

    sql+=" SELECT vehicle_code,blackbox_id "
    sql += " ,get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30')::int/ 60 as run "
    sql += ",get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'31')::int/ 60 as idle "
    sql+=" ,COALESCE(get_oilconfig_idle(vehicle_code)::int, 0) as fuel_idle "
    sql+=",COALESCE(get_oilconfig_running(vehicle_code)::int, 0) as fuel_run "
    sql+=" FROM res "
    sql+=" WHERE "
    sql += " get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30') IS NOT NULL "
    sql+=" ORDER BY vehicle_code "
    sql+=") "

    sql += " SELECT " + utl.sqote(start_date) + " as date_report,vehicle_code as truck_name,blackbox_id,run+idle as  working_hour "
    sql+=" ,(run * fuel_run) + (idle * fuel_idle) as fuel_collect "
    sql += " ,fuel_run+fuel_idle as avg_fuel,'normal' as  status_fuel "
    sql += "  FROM t "
     
    db.get_rows(pg_htt, sql, function (rows) {
        debugger;
        if (rows.length > 0) {

            var str = " ";
            async.eachSeries(rows, function (row, next) {
                str += "(" + utl.sqote(row.date_report) + ',' + utl.sqote(row.truck_name) + ',' + utl.sqote(row.fuel_collect) + ',' + utl.sqote(row.working_hour) + ',' + utl.sqote(row.avg_fuel) + ',' + utl.sqote(row.status_fuel) + "),"
                next();
            }, function () {
                debugger
                str = utl.iRmend(str);
                var sql = "INSERT INTO truck_fuel_report (date_report,truck_name,fuel_collect,working_hour,avg_fuel,status_fuel)  VALUES " + str;
                db.excute(pg_htt, sql, function (response) {
                    if (response == 'oK') {
                        callback(response);
                    }
                });
            });

        } else {
            console.log('no data');
            callback(null);
        }
    });
}

//#region
/*
 
WITH res as(
 SELECT truck_number as vehicle_code
	,blackbox_id
 FROM htt7
)

SELECT --vehicle_code,blackbox_id
 SUM(get_status_zrep(blackbox_id,'2015-12-23','33')::int/ 60::int) as stop
,SUM(get_status_zrep(blackbox_id,'2015-12-23','31')::int/ 60::int) as idle
,SUM(get_status_zrep(blackbox_id,'2015-12-23','30')::int/ 60::int) as run
,SUM(get_waitting_time(vehicle_code,'2015-12-23')::int) as watting
,count(get_trucktype2(vehicle_code)) as truck_items
,get_trucktype2(vehicle_code) as truck_type
FROM res
WHERE get_status_zrep(blackbox_id,'2015-12-23','30')::int >0
AND get_waitting_time(vehicle_code,'2015-12-23')::int >0 
GROUP BY get_trucktype2(vehicle_code)

UNION ALL

SELECT --vehicle_code,blackbox_id
 SUM(get_status_zrep(blackbox_id,'2015-12-23','33')::int/ 60::int) as stop
,SUM(get_status_zrep(blackbox_id,'2015-12-23','31')::int/ 60::int) as idle
,SUM(get_status_zrep(blackbox_id,'2015-12-23','30')::int/ 60::int) as run
,SUM(get_waitting_time(vehicle_code,'2015-12-23')::int) as watting
,COUNT(vehicle_code) as truck_items
,'0' as truck_type
FROM res
WHERE get_status_zrep(blackbox_id,'2015-12-23','30')::int >0
AND get_waitting_time(vehicle_code,'2015-12-23')::int >0 
 */
//#endregion

function process_performance_truck(start_date, callback) {
    var sql = "";
    sql += " WITH res as( ";
    sql += " SELECT truck_number as vehicle_code ";
    sql += "	,blackbox_id ";
    //  sql += ",get_min_max_cutting_time(blackbox_id," + utl.sqote(start_date) + ") as x ";
    //sql += ",get_min_maxtime_zrep_status(blackbox_id, " + utl.sqote(start_date) + ", '10') as x";
    sql += " FROM htt7 ";
    sql += " ) ";
    sql += " SELECT ";
    sql += " sum( get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30')::int/ 60) as run ";
    sql += " ,sum(get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'31')::int/ 60) as idle ";
    sql += " ,sum(get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'33')::int/ 60) as stop ";
    sql += " ,SUM(get_waitting_time(vehicle_code," + utl.sqote(start_date) + ")::int) as watting";
    sql += " ,count(get_trucktype2(vehicle_code)) as truck_items ";
    sql += " ,get_trucktype2(vehicle_code) as truck_type ";
    sql += " FROM res ";
    sql += " WHERE get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30')::int >0 ";
    sql += " AND get_waitting_time(vehicle_code," + utl.sqote(start_date) + ")::int >0 ";
    sql += " GROUP BY get_trucktype2(vehicle_code) "
    sql += " UNION ALL ";
    sql += " SELECT ";
    sql += " sum( get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30')::int/ 60) as run ";
    sql += " ,sum(get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'31')::int/ 60) as idle ";
    sql += " ,sum(get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'33')::int/ 60) as stop ";
    sql += " ,SUM(get_waitting_time(vehicle_code," + utl.sqote(start_date) + ")::int) as watting";
    sql += " ,COUNT(vehicle_code) as truck_items ";
    sql += " ,'0' as truck_type ";
    sql += " FROM res ";
    sql += " WHERE get_status_zrep(blackbox_id," + utl.sqote(start_date) + ",'30')::int >0 ";
    sql += " AND get_waitting_time(vehicle_code," + utl.sqote(start_date) + ")::int >0 ";
   

    db.get_rows(pg_htt, sql, function (res) {
        debugger;
        if (res.length > 0) {
            var xsql = ' ';
            //date_start,stop,idle,run,watting,truck_items,truck_type,efficiency
            async.eachSeries(res, function (data, next) {

                var a = (parseInt(data.run) + parseInt(data.idle));
                var b = parseInt(data.watting);
                var c = b / a;
                var percent_performance = (c * 100).toFixed(2);

                xsql += "(" + utl.sqote(start_date) + "," + utl.sqote(data.stop) + "," + utl.sqote(data.idle) + "," + utl.sqote(data.run) + "," + utl.sqote(data.watting) + "," + utl.sqote(data.truck_items) + "," + utl.sqote(data.truck_type) + "," + utl.sqote(percent_performance) + "),"
                next();
            }, function () {
                debugger;
                xsql = utl.iRmend(xsql);
                //  console.log(percent_performance);
                //  var data = { 'date': start_date, 'stop': res[0].stop, 'run': res[0].run, 'idle': res[0].idle, 'watting': res[0].cutting, 'efficiency': percent_performance }

                var sql = "INSERT INTO history_performance_truck (date_start,stop,idle,run,wait,truck_items,truck_type,efficiency) "
                sql += "VALUES " + xsql;
                db.excute(pg_htt, sql, function (response) {
                    if (response == 'oK') {
                        callback(response);
                    }
                });

            });




        }
    });
}


//var start_date = '2016-01-04';//moment().format('YYYY-MM-DD');


function start_job_performance()
{
    var start_date = moment().format('YYYY-MM-DD');
    process_performance_harvester(start_date, function (xres1) {
        console.log('process_performance_harvester ' + xres1);
    });
    
    process_call_oil_harvester(start_date, function (xres2) {
        console.log('process_call_oil_harvester ' + xres2);
    });

    process_call_oil_truck(start_date, function (xres4) {
        console.log('process_call_oil_truck ' + xres4);
    });

    process_performance_truck(start_date, function (xres3) {
        console.log('process_performance_truck ' + xres3);
    });
}

exports.start_job_performance = start_job_performance;

/*
setTimeout(function () {
   // process_performance_truck('2015-12-23', function () { });
    process_call_oil_truck('2016-01-01', function () { });
}, 1000);
*/