
//#region lib

var fs = require('fs');
var async = require('async');
var mustache = require("mustache");
var linq = require('linq.js');
var utl = require('Utility.js')
var utcp = require('Utility_tcp.js');
var timespan = require('timespan');
var _ = require('underscore');
var moment = require('moment');
var squel = require("squel");
//var Q = require('q');
//var Fiber = require('fibers');


var iTimer = require('iTimer_Helper.js');

var ms_config = 'dbu_yazaki';
var ms_destina = ' ';


var db = require('iConnectdb.js');
var ipm = new db.im2(db.get_configdb_web());
var iph = new db.im2(db.get_config_his_web());


//http://millermedeiros.github.io/mdoc/examples/node_api/doc/buffers.html


//#endregion


var stop_time_dlt = 1800; //  60 sec * 30 min = 1800 sec

//#region stuctre and config_code
//https://stijndewitt.wordpress.com/2014/01/26/enums-in-javascript/

var item_code = {
    overall: "01",
    safe: "02",
    eco: "03",
    maximum_speed: "04",
    overspeed_times_count: "05",
    overspeed_period_time: "06",
    rpm_times_count: "07",
    rpm_period_time: "08",
    abruptly_starts_times_count: "09",
    abruptly_accelerates_times_count: "10",
    abruptly_decelerates_times_count: "11",
    idling_time: "12",
    hours_of_continuous_driving: "13",
    sign_of_danger: "14",
    selection_1: "15",
    selection_2: "16",
    selection_3: "17"
};

var demominatar = {
    safe :165,
    eco :160,
    overall:265
};

function struct_service_index()
{
    this.transit_time = "0";
    this.total_distance = "0";
    this.max_speed = "0";
    this.avg_speed = "0";
    this.over_speed_count = "0";
    this.over_speed_time = "0";
    this.max_rpm = "0";
    this.over_rpm_count = "0";
    this.over_rpm_time = "0";

    //this.low_speed_over_rpm_count = "";
    //this.low_speed_over_rpm_time = "";
    //this.high_speed_over_rpm_count = "";
    //this.high_speed_over_rpm_time = "";

    this.start_distance = "0";
    this.end_distance = "0";
    this.sudden_start_count = "0";
    this.acceleration_count = "0";
    this.deceleration_count = "0";
    this.total_idling_time = "0";
    this.total_throttle_opening_time = "0";
    this.max_continuous_driving_time = "0";

    this.ch1_count = "0";
    this.ch2_count = "0";
    this.ch3_count = "0";
    this.ch4_count = "0";
    this.ch5_count = "0";
    this.ch6_count = "0";
    this.ch7_count = "0";
    this.ch8_count = "0";
    this.ch9_count = "0";

    this.selection1="0";
    this.selection2="0";
    this.selection3="0";

    this.dangerous_sign_count = "0";

    this.speed_histogram_1 = "0";
    this.speed_histogram_2 = "0";
    this.speed_histogram_3 = "0";
    this.speed_histogram_4 = "0";
    this.speed_histogram_5 = "0";
    this.speed_histogram_6 = "0";
    this.speed_histogram_7 = "0";
    this.speed_histogram_8 = "0";

    this.low_speed_rpm_histogram_1 = "0";
    this.low_speed_rpm_histogram_2 = "0";
    this.low_speed_rpm_histogram_3 = "0";
    this.low_speed_rpm_histogram_4 = "0";
    this.low_speed_rpm_histogram_5 = "0";
    this.low_speed_rpm_histogram_6 = "0";
    this.low_speed_rpm_histogram_7 = "0";
    this.low_speed_rpm_histogram_8 = "0";

    this.high_speed_rpm_histogram_1 = "0";
    this.high_speed_rpm_histogram_2 = "0";
    this.high_speed_rpm_histogram_3 = "0";
    this.high_speed_rpm_histogram_4 = "0";
    this.high_speed_rpm_histogram_5 = "0";
    this.high_speed_rpm_histogram_6 = "0";
    this.high_speed_rpm_histogram_7 = "0";
    this.high_speed_rpm_histogram_8 = "0";

    this.acceleration_histogram_1 = "0";
    this.acceleration_histogram_2 = "0";
    this.acceleration_histogram_3 = "0";
    this.acceleration_histogram_4 = "0";
    this.acceleration_histogram_5 = "0";
    this.acceleration_histogram_6 = "0";
    this.acceleration_histogram_7 = "0";
    this.acceleration_histogram_8 = "0";

    this.deceleration_histogram_1 = "0";
    this.deceleration_histogram_2 = "0";
    this.deceleration_histogram_3 = "0";
    this.deceleration_histogram_4 = "0";
    this.deceleration_histogram_5 = "0";
    this.deceleration_histogram_6 = "0";
    this.deceleration_histogram_7 = "0";
    this.deceleration_histogram_8 = "0";

    this.accelerator_histogram_1 = "0";
    this.accelerator_histogram_2 = "0";
    this.accelerator_histogram_3 = "0";
    this.accelerator_histogram_4 = "0";
    this.accelerator_histogram_5 = "0";
    this.accelerator_histogram_6 = "0";
    this.accelerator_histogram_7 = "0";
    this.accelerator_histogram_8 = "0";


    this.overall_driving_point = "0";
    this.safe_driving_point = "0";
    this.eco_driving_point = "0";


    this.overall_driving_rank = "0";
    this.safe_driving_rank = "0";
    this.eco_driving_rank = "0";


    this.eval_point_max_speed = "0";
    this.eval_point_overspeed_count = "0";
    this.eval_point_overspeed_time = "0";
    this.eval_point_overrpm_count = "0";
    this.eval_point_overrpm_time = "0";
    this.eval_point_sudden_start_count = "0";
    this.eval_point_acceleration_count = "0";
    this.eval_point_deceleration_count = "0";
    this.eval_point_idling_time = "0";
    this.eval_point_continuous_driving_time = "0";
    this.eval_point_driving_to_back_count = "0";
    this.eval_point_start_out_count = "0";
    this.eval_point_select_item1 = "0";
    this.eval_point_select_item2 = "0";
    this.eval_point_select_item3 = "0";
    this.eval_point_dangerous_sign_count = "0";

    this.eval_rank_max_speed = "0";
    this.eval_rank_overspeed_count = "0";
    this.eval_rank_overspeed_time = "0";
    this.eval_rank_overrpm_count = "0";
    this.eval_rank_overrpm_time = "0";
    this.eval_rank_sudden_start_count = "0";
    this.eval_rank_acceleration_count = "0";
    this.eval_rank_deceleration_count = "0";
    this.eval_rank_idling_time = "0";
    this.eval_rank_continuous_driving_time = "0";
    this.eval_rank_driving_to_back_count = "0";
    this.eval_rank_start_out_count = "0";
    this.eval_rank_select_item1 = "0";
    this.eval_rank_select_item2 = "0";
    this.eval_rank_select_item3 = "0";
    this.eval_rank_dangerous_sign_count = "0";
  //  this.report_time = "";
    //  this.report_flag = "";
    this.sum_safe_driving = 0;
    this.sum_eco_driving = 0;
    this.sum_overall_driving = 0;
    this.stop_times_over_30 = 0;
    this.driving_time = 0;
    this.low_speed_max_rpm = 0;
    this.high_speed_max_rpm = 0;
}

//#endregion

//#region make_array master

function make_ar_day(from_date, to_date) {
   // debugger;
    var iday = diff_day(from_date, to_date);
    var ar = [];
    if (iday > 0) {
        for (var i = 0; i <= iday; i++) {
            if (ar.length == 0) {
                ar.push(format_unix_date(dateAdd(from_date, 'day', 1), 'YYYYMMDD'));
            } else {
                var next_day = i + 1;
                ar.push(format_unix_date(dateAdd(from_date, 'day', next_day), 'YYYYMMDD'));
            }

        }
    } else {
        ar.push(format_unix_date(from_date, 'YYYYMMDD'));
    }
    return ar;
}

function make_master_ar(from_date, to_date,cb)
{
  //  debugger;
   // var init_star_time = '2014-12-04 09:21:10';
  //  var init_end_time = '2014-12-04 21:52:57';

    var unix_start = format_unix_date(from_date, "YYYYMMDDHHmmss");//'20141204092210';
    var unix_end = format_unix_date(to_date,"YYYYMMDDHHmmss");//'20141205215356'//'20141204215257';

    var ar_day = make_ar_day(from_date, to_date);// ['20141204', '20141205', '20141206', '20141207'];
    var i_day = 0;
    var minute_loop = total_minute_loop(from_date, to_date); //751; //SELECT DATEDIFF(MINUTE,'2014-12-01 09:21:10','2014-12-07 21:52:57') = 9391

    var date = new Date(from_date);
    var  interval = 1, arr = [];
    for (var i = 0; i <= minute_loop; i++)
    {
        if (i > 0)
        {
            date.setMinutes(date.getMinutes() + interval);
        }

     
        for (var j = 0; j <= 59; j++)
        {
            var d1 = ar_day[i_day] 
            var d2 = utl.zeroPad(date.getHours(), 2) + utl.zeroPad(date.getMinutes(), 2) + utl.zeroPad(j, 2);
            if (d2 == '235959') {
                i_day = i_day + 1;
                date = new Date(dateAdd(from_date, 'day', i_day));//add next day +1
            }
            var d = d1 + d2;
            if (d >= unix_start && d <= unix_end)
            {
                arr.push(d);
            }
       
        }
    }
   //console.log(arr);
  //  console.log(arr.length);
    cb(arr);
  

}

//#endregion


//****
//#region get_data db and service_index

function get_data_db(tb_name,from_date,to_date,cb) {
   // config_con.dbname = ms_config;
  //  var ms_destina = config_con;
   // tb_name = 'z104090151223sec'

    var sql = " SELECT blackbox_id,to_char(r_time_sec, 'YYYY-MM-DD HH24:MI:SS') as r_time_sec,to_char(r_time_sec, 'YYYYMMDDHH24MISS')as ux_r_time_sec,r_status_sec,r_speed_sec,r_rpm_sec,r_io,accceletor,ig_status ";
    sql += " FROM " + tb_name + " WHERE  r_time_sec BETWEEN  " + utl.sqote(from_date) + " AND " + utl.sqote(to_date) + " ";
    sql += " AND  (SELECT COUNT(tablename) FROM pg_tables WHERE tablename = " + utl.sqote(tb_name) + ")='1' ";
    sql += " ORDER BY r_time_sec ASC ";


    db.get_rows(iph, sql, function (ar) {
        console.log('length data sec ' + ar.length);
        cb(ar);
        return;
    });

}

function get_service_index(cb) {
    var sql = "SELECT service_index_no,vehicle_code,to_char(service_start_time, 'YYYY-MM-DD HH24:MI:SS') as start_time,to_char(service_end_time, 'YYYY-MM-DD HH24:MI:SS') as end_time  FROM service_index  WHERE ";
  sql += " report_flag = '1' ";
//sql += " service_index_no='1957' " // 1348
  sql += "LIMIT 1 ";
    _query_ar(sql, function (res) {
        cb(res);
        return;
    });
}

function get_vehicle_setting(vechicle_code,cb) {
    var sql = "SELECT vehicle_name,vehicle_device_serial_no,eval_standard_code_device,eval_standard_code";
 //   sql += " coalesce(analog_ch1_existence,'0') as analog_ch1,coalesce(analog_ch2_existence,'0') as analog_ch2,coalesce(analog_ch3_existence,'0') as analog_ch3,coalesce(analog_ch4_existence,'0') as analog_ch4 ,default_driver_code";
  sql += " FROM master_vehicle WHERE vehicle_code=" + utl.sqote(vechicle_code);
  _query_ar(sql, function (res) {
      cb(res);
      return;
  });

}

function get_constant_speed(vechicle_code,cb) {
    var sql = "SELECT coalesce(constant_speed_to_check,'60') as constant_speed_to_check  FROM master_device_setting WHERE device_setting_code "
  sql += " = (SELECT  device_setting_code FROM master_vehicle_device_management WHERE vehicle_device_serial_no "
  sql += " =(SELECT vehicle_device_serial_no FROM master_vehicle WHERE vehicle_code='" + vechicle_code + "')) ";
  _query_ar(sql, function (res) {
      cb(res);
      return;
  });
}

//#endregion

function iMain(para,cb)
{
    var from_date = para.start_time;// '2014-12-04 09:22:10';'2014-12-21 08:14:38';//
    var end_date = para.end_time; //'2014-12-04 21:52:57';'2014-12-21 08:55:38';//
    var tb_name =  para.tb_sec; //'z104090151223sec'; //'z10000003sec';//
    var to_date = add_second(end_date,59); //'2014-12-04 21:53:56';
    //debugger;

    var sec_data = new Array();
    var json_data = new Array();

    try
    {
        make_master_ar(from_date, to_date, function (ar_master)
        {
            var last_key = ar_master[ar_master.length - 1];
            var i = 0; //for check end
            get_data_db(tb_name, from_date, to_date, function (res_db)
            {
                async.eachSeries(res_db, function (row, next) {


                    if (i != res_db.length - 1) //426  "2014-12-04 21:52:57"
                    {
                     // debugger;
                        //   console.log(res_db.length);

                        row.r_io = decode_io(row.r_io);//prepare_io(row.r_io);
                           //prepare_io("1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0");

                        var _data = { "r_status_sec": row.r_status_sec.split(','), "r_speed_sec": row.r_speed_sec.split(','), "r_rpm_sec": row.r_rpm_sec.split(','), "r_io": row.r_io.split(','), "accceletor": row.accceletor.split(','), "ig_status": "" };
                        sec_data[0] = _data;

                        var ux_idate = row.ux_r_time_sec; //"20141204092210"
                        var i_date_from = row.r_time_sec; //'2014-12-04 09:22:10'
                        var i_date_to = res_db[i + 1]['r_time_sec']; // '2014-12-04 09:23:13'

                        var diff_sec = diff_second(i_date_from, i_date_to)-60; //DATEDIFF(SECOND,'2014-12-04 09:22:10','2014-12-04 09:23:13')-60 as Diff -- +3

                        put_data(ar_master, ux_idate, sec_data, json_data, diff_sec, last_key, function (res) {
                            //debugger;
                            i = i + 1;
                            next();

                        });

                       
                        //  console.log(i_date_to);
                    }
                    else
                    {
                        row.r_io  = decode_io(row.r_io);
                        
                        var _data = { "r_status_sec": row.r_status_sec.split(','), "r_speed_sec": row.r_speed_sec.split(','), "r_rpm_sec": row.r_rpm_sec.split(','), "r_io": row.r_io.split(','), "accceletor": row.accceletor.split(','), "ig_status": "" };
                        sec_data[0] = _data;

                        var ux_idate = row.ux_r_time_sec; //"20141204092210"
                      //  var i_date_from = row.r_time_sec; //'2014-12-04 09:22:10'
                      //  var i_date_to = res_db[i]['r_time_sec']; // '2014-12-04 09:23:13'

                        var diff_sec = 0;// diff_second(i_date_from, i_date_to); //DATEDIFF(SECOND,'2014-12-04 09:22:10','2014-12-04 09:23:13')-60 as Diff -- +3

                        put_data(ar_master, ux_idate, sec_data, json_data, diff_sec, last_key, function (res) {
                            //debugger;
                            console.log('length data ' + res.length+' sec');
                      
                           // calculate_data_sec(res);
                            //console.log(res);

                           cb(res);
                            return;

                        });
                     
                    }

                    //console.log(i);
                    //console.log(res_db[i]['r_time_sec']);
                    //i = i + 1;
                    //next();

                    //console.log(diff_sec);
                    //console.log(row.r_time_sec);


                });
            });

        });
    }
    catch (e) {
        debugger;
        console.log('error msg '+e.message);
    }

    // console.log(   diff_second('2014-12-04 09:22:10', '2014-12-04 09:23:13'));
    // console.log(total_second('2014-12-04 09:21:10', '2014-12-04 21:52:57'));
    //  console.log(total_minute_loop('2014-12-04 09:21:10', '2014-12-04 21:52:57'));
    //   console.log(add_second(from_date, 59));
    // var end_loop_sec = total_second(from_date, to_date); //45047

    // put_data()


}


function put_data(ar_master, key_index, sec_data, json_data,diff_sec,last_key,cb)
{
    //var from_date = '2014-12-04 09:22:10';
    //var to_date = '2014-12-04 21:52:57';

    //make_master_ar(from_date, to_date, function (ar_master)
    //{
   // debugger;
     

    var i = _.indexOf(ar_master, key_index);//'20141204092427');         //  i is position of index ar_master

  
    //  console.log(i);
        var last_index = 59; // last index get last value of data 
        var j = 0; //for 0-59 // for loop 0-59
        //for adding sec missing
        var count = 0;

        if (diff_sec > 0) {
            count = (i + last_index);
        } 
        else {
            count = (i + last_index) - Math.abs(diff_sec);
        }


        var last_r_status = sec_data[0].r_status_sec[last_index];
        var last_r_speed = sec_data[0].r_speed_sec[last_index];
        var last_r_rpm = sec_data[0].r_rpm_sec[last_index];
        var last_r_io = sec_data[0].r_io[last_index];
        var last_acceletor = sec_data[0].accceletor[last_index];

        var l_igstatus = sec_data[0].r_io[last_index];
        var last_ig_status = utl.Left(l_igstatus, 1);//sec_data[0].r_io[last_index].split('');//sec_data[0].ig_status[last_index];
        var last_bit1_9 = utl.Mid(l_igstatus, 2, 9);
        
        for (i; i <= count; i++)
        {
            //#region
            //if (ar_master[i] == '20141221085559') {
            //    debugger;
            //    console.log(i);
            //}
            //#endregion
            var s_igstatus = sec_data[0].r_io[j];
            var ig_status = utl.Left(s_igstatus, 1);//sec_data[0].r_io[j].split('');
            var bit1_9 =  utl.Mid(s_igstatus, 2, 9);
            var _i = { 'key': ar_master[i], 's_status': sec_data[0].r_status_sec[j], 's_speed': sec_data[0].r_speed_sec[j], 's_rpm': sec_data[0].r_rpm_sec[j], 'r_io': sec_data[0].r_io[j], 'acc': sec_data[0].accceletor[j], 'ig_status': ig_status, 'sio': bit1_9 };

            if (parseInt(ar_master[i]) <= parseInt(last_key))
            {
                json_data.push(_i);
                j = j + 1;
            }
            //else {
            //    console.log(' ' + ar_master[i]);

            //}
       
        }

        if (diff_sec > 0)
        {
            count = count + diff_sec;
            for (i; i <= count; i++) {

                if (parseInt(ar_master[i]) <= parseInt(last_key))
                {
                    var _i = { 'key': ar_master[i], 's_status': last_r_status, 's_speed': last_r_speed, 's_rpm': last_r_rpm, 'r_io': last_r_io, 'acc': last_acceletor, 'ig_status': last_ig_status, 'sio': last_bit1_9 };
                    json_data.push(_i);
                }
                //else {
                //    console.log('diffsec ' + ar_master[i]);

                //}
            }
        }
      
        cb(json_data);
        return;
   // });

}

//#region Main
/*
setTimeout(function () {
  
    iMain(function (r) {
      //  console.log(r);
    });


    
   //var from_date = '2014-12-01 09:22:10';
    //var to_date = '2014-12-02 21:52:57';
   // var from_date = '2014-12-21 08:14:38';//'2014-12-04 09:22:10';
   // var endate = '2014-12-21 08:58:38';//'2014-12-04 21:52:57';
   // console.log(add_second(to_date, '59'));
    //console.log( total_second(from_date, to_date));
    //console.log(diff_day(from_date, to_date));
    //make_ar_day(from_date, to_date);
   //make_master_ar(from_date, to_date, function (ar_master) {

   //});
  
  //  AND r_time <= 
 // make_report_sharp_i('z10000003history','2014-12-11 08:13:38', '2014-12-12 02:40:38');
 

}, 1000);
*/
//#endregion


//#region
/*
if (ux_idate == ar_master[i]) {
    put_data(ar_master, ux_idate, sec_data, json_data, diff_sec, function (res) {
        //debugger;
        console.log(res.length);
        i = i + 1;
        next();

    });
}
else {
    put_data(ar_master, ux_idate, sec_data, json_data, diff_sec, function (res) {
        debugger;
        console.log(res.length);
        i = i + 1;
        next();

    });
    // console.log(res.length);
}
*/
//#endregion

//+++++++++++++++++++++++++++++++++++  Gen Report ++++++++++++++++++++++++++

//#region Cal Data #Sec

function calculate_data_sec(para,res,struc,cb)
{   
    var over_speed = parseInt(para.speed_setting);//'60';

    //#region low_speed - high_speed
    /*    */
    console.log("++++++++++++++++++++++ Calculate data SEC ++++++++++++++++++++++++")
  

    struc.low_speed_rpm_histogram_1 = low_speed(res, '1', '1000', over_speed);
    struc.low_speed_rpm_histogram_2 = low_speed(res, '1001', '1500', over_speed);
    struc.low_speed_rpm_histogram_3 = low_speed(res, '1501', '2000', over_speed);
    struc.low_speed_rpm_histogram_4 = low_speed(res, '2001', '2500', over_speed);
    struc.low_speed_rpm_histogram_5 = low_speed(res, '2501', '3000', over_speed);
    struc.low_speed_rpm_histogram_6 = low_speed(res, '3001', '3500', over_speed);
    struc.low_speed_rpm_histogram_7 = low_speed(res, '3501', '4000', over_speed);
    struc.low_speed_rpm_histogram_8 = low_speed(res, '4001', '9000', over_speed);
    
    
   var  low_speed_max_rpm = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.s_rpm) >= parseInt('1') })
        .Where(function (x) { return parseInt(x.s_rpm) <= parseInt('9000') })
        .Where(function (x) { return parseInt(x.s_speed) <= parseInt(over_speed) })
        .Select(function (x) { return parseFloat(x.s_rpm) })
        .Count();
    
    if (low_speed_max_rpm > 0) {
        low_speed_max_rpm = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.s_rpm) >= parseInt('1') })
        .Where(function (x) { return parseInt(x.s_rpm) <= parseInt('9000') })
        .Where(function (x) { return parseInt(x.s_speed) <= parseInt(over_speed) })
        .Select(function (x) { return parseFloat(x.s_rpm) })
        .Max();
    } else {
        low_speed_max_rpm = 0;
    }

      //  
    
   // console.log(JSON.stringify(res));

    var hight_speed_max_rpm = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.s_rpm) >= parseInt('1') })
        .Where(function (x) { return parseInt(x.s_rpm) <= parseInt('9000') })
        .Where(function (x) { return parseInt(x.s_speed) >= parseInt(over_speed) })
        .Select(function (x) { return parseFloat(x.s_rpm) })
        .Count();
  
    if (hight_speed_max_rpm > 0) {
        hight_speed_max_rpm = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.s_rpm) >= parseInt('1') })
        .Where(function (x) { return parseInt(x.s_rpm) <= parseInt('9000') })
        .Where(function (x) { return parseInt(x.s_speed) >= parseInt(over_speed) })
        .Select(function (x) { return parseFloat(x.s_rpm) })
        .Max(); 
    } else{
        hight_speed_max_rpm = 0;
    }
        

    console.log(low_speed_max_rpm + ' ' + hight_speed_max_rpm);
    
    struc.low_speed_max_rpm = low_speed_max_rpm;
    struc.high_speed_max_rpm = hight_speed_max_rpm;


    console.log('low_speed_histogram :' + struc.low_speed_rpm_histogram_1 + ' ' + struc.low_speed_rpm_histogram_2 + ' ' + struc.low_speed_rpm_histogram_3 + ' ' + struc.low_speed_rpm_histogram_4 + ' ' + struc.low_speed_rpm_histogram_5 + ' ' + struc.low_speed_rpm_histogram_6 + ' ' + struc.low_speed_rpm_histogram_7 + ' ' + struc.low_speed_rpm_histogram_8);


    struc.high_speed_rpm_histogram_1  = high_speed(res, '1', '1000', over_speed);
    struc.high_speed_rpm_histogram_2  = high_speed(res, '1001', '1500', over_speed);
    struc.high_speed_rpm_histogram_3  = high_speed(res, '1501', '2000', over_speed);
    struc.high_speed_rpm_histogram_4  = high_speed(res, '2001', '2500', over_speed);
    struc.high_speed_rpm_histogram_5  = high_speed(res, '2501', '3000', over_speed);
    struc.high_speed_rpm_histogram_6  = high_speed(res, '3001', '3500', over_speed);
    struc.high_speed_rpm_histogram_7  = high_speed(res, '3501', '4000', over_speed);
    struc.high_speed_rpm_histogram_8  = high_speed(res, '4001', '9000', over_speed);

    console.log('high_speed_histogram :' + struc.high_speed_rpm_histogram_1 + ' ' + struc.high_speed_rpm_histogram_2 + ' ' + struc.high_speed_rpm_histogram_3 + ' ' + struc.high_speed_rpm_histogram_4 + ' ' + struc.high_speed_rpm_histogram_5 + ' ' + struc.high_speed_rpm_histogram_6 + ' ' + struc.high_speed_rpm_histogram_7 + ' ' + struc.high_speed_rpm_histogram_8);

    //#endregion

    //#region speed_historgram
    /*
   var check_ig_on = linq.Enumerable.From(res)
      .Where(function (x) { return parseInt(x.ig_status) == parseInt('1') })
    //  .Where(function (x) { return parseInt(x.s_speed) == parseInt('0') })
      .Count()
    */

   //console.log(check_ig_on);

        var speed_1 = speed_histogram(res, '0', '0');
        var speed_2 = speed_histogram(res, '1', '20');
        var speed_3 = speed_histogram(res, '21', '40');
        var speed_4 = speed_histogram(res, '41', '60');
        var speed_5 = speed_histogram(res, '61', '80');
        var speed_6 = speed_histogram(res, '81', '100');
        var speed_7 = speed_histogram(res, '101', '120');
        var speed_8 = speed_histogram(res, '121', '140');

        struc.speed_histogram_1 = speed_1;
        struc.speed_histogram_2 = speed_2;
        struc.speed_histogram_3 = speed_3;
        struc.speed_histogram_4 = speed_4;
        struc.speed_histogram_5 = speed_5;
        struc.speed_histogram_6 = speed_6;
        struc.speed_histogram_7 = speed_7;
        struc.speed_histogram_8 = speed_8;

     //#endregion

    //#region accelerator
    var tspeed_1 = accelerator(res, '0', '0');
    var tspeed_2 = accelerator(res, '1', '20');
    var tspeed_3 = accelerator(res, '21', '40');
    var tspeed_4 = accelerator(res, '41', '60');
    var tspeed_5 = accelerator(res, '61', '80');
    var tspeed_6 = accelerator(res, '81', '100');

    struc.accelerator_histogram_1 = tspeed_1;
    struc.accelerator_histogram_2 = tspeed_2;
    struc.accelerator_histogram_3 = tspeed_3;
    struc.accelerator_histogram_4 = tspeed_4;
    struc.accelerator_histogram_5 = tspeed_5;
    struc.accelerator_histogram_6 = tspeed_6;

     //+ ' ' + tspeed_7 + ' ' + tspeed_8);

    //
 //#endregion  


    struc.transit_time = (speed_2 + speed_3 + speed_4 + speed_5 + speed_6 + speed_7 + speed_8);
    struc.total_throttle_opening_time = (tspeed_2 + tspeed_3 + tspeed_4 + tspeed_5 + tspeed_6);
    struc.driving_time = (speed_1 + speed_2 + speed_3 + speed_4 + speed_5 + speed_6 + speed_7 + speed_8);


    console.log('speed_histogram 1-8 :' + speed_1 + ' ' + speed_2 + ' ' + speed_3 + ' ' + speed_4 + ' ' + speed_5 + ' ' + speed_6 + ' ' + speed_7 + ' ' + speed_8);
    console.log('accelerator 1-6 :' + tspeed_1 + ' ' + tspeed_2 + ' ' + tspeed_3 + ' ' + tspeed_4 + ' ' + tspeed_5 + ' ' + tspeed_6);
    console.log('total_throttle_opening_time : ' + struc.total_throttle_opening_time);
    console.log('transit_time : ' + struc.transit_time);

    min_max_avg_speed_rpm(res, function (r) {
        struc.avg_speed = r.avg_speed;
        struc.max_rpm = r.max_rpm;
        struc.max_speed = r.max_speed;
        console.log('max_speed integer :' + r.max_speed + ' avg_speed : ' + r.avg_speed + ' max_rpm : ' + r.max_rpm )//+ ' transit_time :' + transit_time);
    });

  
        /* */
    chanal_9_io(res, function (r_9_io) {
         console.log('ch1-ch9 : ' + JSON.stringify(r_9_io));
            struc.ch1_count = r_9_io[1];
            struc.ch2_count = r_9_io[2];
            struc.ch3_count = r_9_io[3];
            struc.ch4_count = r_9_io[4];
            struc.ch5_count = r_9_io[5];
            struc.ch6_count = r_9_io[6];
            struc.ch7_count = r_9_io[7];
            struc.ch8_count = r_9_io[8];
            struc.ch9_count = r_9_io[9];

            var anlog1 = parseInt(para.setting.analog_ch1);
            var anlog2 = parseInt(para.setting.analog_ch2);
            var anlog3 = parseInt(para.setting.analog_ch3);

            struc.selection1 = r_9_io[anlog1];
            struc.selection2 = r_9_io[anlog2];
            struc.selection3 = r_9_io[anlog3];
        });
       
 
      
    calculate_acc_dcc(res, function (r) {
        //console.log('acc dcc' + JSON.stringify(r));
        /*    */
        console.log('++++  acc +++++');
        console.log('6-9 ' + r.acc_score[0]);
        console.log('9.1-11 ' + r.acc_score[1]);
        console.log('11.1-12 ' + r.acc_score[2]);
        console.log('12.1-13 ' + r.acc_score[3]);
        console.log('13.1-14 ' + r.acc_score[4]);
        console.log('14.1-15 ' + r.acc_score[5]);
        console.log('15.1- ' + r.acc_score[6]);


        console.log('++++  dcc +++++');
        console.log('6-9 ' + r.dcc_score[0]);
        console.log('9.1-11 ' + r.dcc_score[1]);
        console.log('11.1-12 ' + r.dcc_score[2]);
        console.log('12.1-13 ' + r.dcc_score[3]);
        console.log('13.1-14 ' + r.dcc_score[4]);
        console.log('14.1-15 ' + r.dcc_score[5]);
        console.log('15.1- ' + r.dcc_score[6]);
    

        struc.acceleration_histogram_1 = r.acc_score[0];
        struc.acceleration_histogram_2 = r.acc_score[1];
        struc.acceleration_histogram_3 = r.acc_score[2];
        struc.acceleration_histogram_4 = r.acc_score[3];
        struc.acceleration_histogram_5 = r.acc_score[4];
        struc.acceleration_histogram_6 = r.acc_score[5];
        struc.acceleration_histogram_7 = r.acc_score[6];

        struc.deceleration_histogram_1 = r.dcc_score[0];
        struc.deceleration_histogram_2 = r.dcc_score[1];
        struc.deceleration_histogram_3 = r.dcc_score[2];
        struc.deceleration_histogram_4 = r.dcc_score[3];
        struc.deceleration_histogram_5 = r.dcc_score[4];
        struc.deceleration_histogram_5 = r.dcc_score[5];
        struc.deceleration_histogram_7 = r.dcc_score[6];

      
    });


    max_continuous_driving(res,para, function (r) {
      
        struc.max_continuous_driving_time = r.max_continuous_driving;
        struc.stop_times_over_30 = r.count_stop_over_30_min;
        console.log('max_continuous_driving : ' + r.max_continuous_driving + ' sec');
        console.log('stop_times_over_30 : ' + r.count_stop_over_30_min + ' sec');
    });
  
  

    //++++++++++++++++++++++ Cal data I ++++++++++++++++++++++++
    console.log("++++++++++++++++++++++ Calculate data I ++++++++++++++++++++++++")

    get_data_i(para.tb_his, para.start_time, para.end_time, function (res) {

        /*     */
        if (res.length > 0)
        {

            var min_odo_meter = linq.Enumerable.From(res)
           .Select(function (x) { return parseFloat(x.odo_meter) })
           .Min();

            var max_odo_meter = linq.Enumerable.From(res)
           .Select(function (x) { return parseFloat(x.odo_meter) })
           .Max();


            var over_speed_count = linq.Enumerable.From(res)
           .Where(function (x) { return x.event_type == '42' })
           .Select(function (x) { return parseInt(x.event_type) })
           .Count();

            console.log('over_speed_count : '+over_speed_count);

            var over_rpm_count = linq.Enumerable.From(res)
            .Where(function (x) { return x.event_type == '48' })
            .Select(function (x) { return parseInt(x.event_type) })
            .Count();


            var sudden_start_count = linq.Enumerable.From(res)
           .Where(function (x) { return x.event_type == '72' })
           .Select(function (x) { return parseInt(x.event_type) })
           .Count();

            var acceleration_count = linq.Enumerable.From(res)
           .Where(function (x) { return x.event_type == '53' })
           .Select(function (x) { return parseInt(x.event_type) })
           .Count();

            var deceleration_count = linq.Enumerable.From(res)
           .Where(function (x) { return x.event_type == '54' })
           .Select(function (x) { return parseInt(x.event_type) })
           .Count();

            var dangerous_sign_count = linq.Enumerable.From(res)
            .Where(function (x) { return x.event_type == '70' })
            .Select(function (x) { return parseInt(x.event_type) })
            .Count();

       
            struc.start_distance = min_odo_meter;
            struc.end_distance = max_odo_meter;
            struc.total_distance = (max_odo_meter - min_odo_meter);


            struc.over_speed_count = over_speed_count;
            struc.over_rpm_count = over_rpm_count;

            struc.sudden_start_count = sudden_start_count;
            struc.acceleration_count = acceleration_count;
            struc.deceleration_count = deceleration_count;
            struc.dangerous_sign_count = dangerous_sign_count;
        }


        //normal_status
        total_idling_time(res, function (r) {
            // console.log(r);
            struc.total_idling_time = r;
        });

        total_over_event(res, '41', '42', function (r) {
            struc.over_speed_time = r;
        }); //over_speed_time

        total_over_rpm_time(res, '47', '48', function (r) {
            struc.over_rpm_time = r;
        }); //over_rpm_time


    cb(struc);
    return;

    });

}

function speed_histogram(res, speed_from, speed_to) {
    //var speed_count30 = 0;
    //var speed_count31 = 0;
    var speed_cound = 0;
    if (parseInt(speed_from) == 0)
    {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return parseInt(x.ig_status) == parseInt('1') })
        .Where(function (x) { return parseInt(x.s_speed) == parseInt('0') })
        .Count()


    }
    else
    {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return parseInt(x.ig_status) == parseInt('1') })
        .Where(function (x) { return parseInt(x.s_speed) >= parseInt(speed_from) })
        .Where(function (x) { return parseInt(x.s_speed) <= parseInt(speed_to) })
        .Count()
    }

    return speed_count;//30 + ',' + speed_count31;

}

function low_speed(res, rpm_from, rpm_to,over_speed) {
    //var speed_count30 = 0;
    //var speed_count31 = 0;
  //  console.log(res);
    
    var speed_cound = 0;
    if (rpm_from == 0) {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return x.s_rpm == '0' })
        .Where(function (x) { return parseInt(x.s_speed) <= parseInt(over_speed) })
        .Count()

    } else {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.s_rpm) >= parseInt(rpm_from) })
        .Where(function (x) { return parseInt(x.s_rpm) <= parseInt(rpm_to) })
        .Where(function (x) { return parseInt(x.s_speed) <= parseInt(over_speed) })
        .Count()

    }

    return speed_count;//30 + ',' + speed_count31;

}

function high_speed(res, rpm_from, rpm_to, over_speed) {
    //var speed_count30 = 0;
    //var speed_count31 = 0;
    var speed_cound = 0;
    if (rpm_from == 0) {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return x.s_rpm == '0' })
        .Where(function (x) { return parseInt(x.s_speed) >= parseInt(over_speed) })
        .Count()

    } else {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.s_rpm) >= parseInt(rpm_from) })
        .Where(function (x) { return parseInt(x.s_rpm) <= parseInt(rpm_to) })
        .Where(function (x) { return parseInt(x.s_speed) > parseInt(over_speed) })
        .Count()

    }

    return speed_count;//30 + ',' + speed_count31;

}

function min_max_avg_speed_rpm(res,cb)
{

    var max_speed = linq.Enumerable.From(res)
    .Select(function (x) { return parseInt(x.s_speed) })
    .Max();
    
    var avg_speed_new = 0;
    if (max_speed > 0) {
        avg_speed_new = linq.Enumerable.From(res)
         .Where(function (x) { return parseInt(x.s_speed) != 0 })
        .Select(function (x) { return parseInt(x.s_speed) })
        .Average();
    }


   // console.log('old speed ' + avg_speed_old + ' new speed ' + avg_speed_new);

    var max_rpm = linq.Enumerable.From(res)
    .Select(function (x) { return parseInt(x.s_rpm) })
    .Max();

    var result = { "max_speed": max_speed, "avg_speed": avg_speed_new, "max_rpm": max_rpm };
    console.log(JSON.stringify(result));
    cb(result);
    return;
}

function calculate_acc_dcc(res,cb) {
 
    console.log('start calculate_acc_dcc');

    var row = linq.Enumerable.From(res)
    .Select(function (x) { return { 's_speed': x.s_speed, 'ig_status': x.ig_status } })
    .ToArray()

   
   
    //  var ar_score = {"0-9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"99":0}
    var acc_score = { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }
    var dcc_score = { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }

    try
    {
        var i = 0;
        //async.eachSeries(res_db, function (row, next)
        //{
        for (var i = 0; i < row.length; i++)
        {
            var cur_speed_sec = row[i]['s_speed'];

            if (i != row.length - 1) //426  "2014-12-04 21:52:57"
            {
                // var status = res_db[i + 1]['status'];

                if (row[i]['ig_status'] == '1') {
                    var next_speed_sec = row[i + 1]['s_speed'];
                    var r = parseInt(next_speed_sec) - parseInt(cur_speed_sec) ;

                    // console.log(i + ' cur_speed_sec' + cur_speed_sec + '- next_speed_sec ' + next_speed_sec+' ='+r);

                    if (r > 0) {

                        switch (r) {
                            case 11: { acc_score[1] = parseInt(acc_score[1]) + 1; } break;
                            case 12: { acc_score[2] = parseInt(acc_score[2]) + 1; } break;
                            case 13: { acc_score[3] = parseInt(acc_score[3]) + 1; } break;
                            case 14: { acc_score[4] = parseInt(acc_score[4]) + 1; } break;
                            case 15: { acc_score[5] = parseInt(acc_score[5]) + 1; } break;
                        }
                        if (r >= 6 && r <= 9 ) { acc_score[0] = parseInt(acc_score[0]) + 1; }
                        else if (r > 15) { acc_score[6] = parseInt(acc_score[6]) + 1; }

                    } else {

                        switch (r) {
                            case -11: { dcc_score[1] = parseInt(dcc_score[1]) + 1; } break;
                            case -13: { dcc_score[2] = parseInt(dcc_score[2]) + 1; } break;
                            case -15: { dcc_score[3] = parseInt(dcc_score[3]) + 1; } break;
                            case -16: { dcc_score[4] = parseInt(dcc_score[4]) + 1; } break;
                            case -17: { dcc_score[5] = parseInt(dcc_score[5]) + 1; } break;
                        }
                        if (r < -17) { dcc_score[6] = parseInt(dcc_score[6]) + 1; }
                        else if (r > -9 && r <= -6) { dcc_score[0] = parseInt(dcc_score[0]) + 1; }

                    }



                 //   i = i + 1;
                   // next();

                }

            }
            else {
                //finish
                var next_speed_sec = row[i]['s_speed'];
                var r = parseInt(next_speed_sec) - parseInt(cur_speed_sec);

                if (r > 0) {

                    switch (r) {
                        case 11: { acc_score[1] = parseInt(acc_score[1]) + 1; } break;
                        case 12: { acc_score[2] = parseInt(acc_score[2]) + 1; } break;
                        case 13: { acc_score[3] = parseInt(acc_score[3]) + 1; } break;
                        case 14: { acc_score[4] = parseInt(acc_score[4]) + 1; } break;
                        case 15: { acc_score[5] = parseInt(acc_score[5]) + 1; } break;
                    }
                    if (r >= 6 && r <= 9) { acc_score[0] = parseInt(acc_score[0]) + 1; }
                    else if (r > 15) { acc_score[6] = parseInt(acc_score[6]) + 1; }

                } else {

                    switch (r) {
                        case -11: { dcc_score[1] = parseInt(dcc_score[1]) + 1; } break;
                        case -13: { dcc_score[2] = parseInt(dcc_score[2]) + 1; } break;
                        case -15: { dcc_score[3] = parseInt(dcc_score[3]) + 1; } break;
                        case -16: { dcc_score[4] = parseInt(dcc_score[4]) + 1; } break;
                        case -17: { dcc_score[5] = parseInt(dcc_score[5]) + 1; } break;
                    }
                    if (r < -17) { dcc_score[6] = parseInt(dcc_score[6]) + 1; }
                    else if (r > -9 && r <= -6) { dcc_score[0] = parseInt(dcc_score[0]) + 1; }

                }

                var result = { 'acc_score': acc_score, 'dcc_score': dcc_score }

                console.log('acc_score : ' + JSON.stringify(acc_score));
                console.log('dcc_score : ' + JSON.stringify(dcc_score));

                cb(result)
                return;
            }
        }
       // });
    }
    catch(e){
        console.log('calculate_acc_dcc ' + e.message);
    }

}

function accelerator(res, speed_from, speed_to) {
    var speed_cound = 0;
    if (speed_from == 0) {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return parseInt(x.ig_status) == 1 })
        .Where(function (x) { return parseInt(x.acc) == 0 })
        .Count()


    } else {
        speed_count = linq.Enumerable.From(res)
        .Where(function (x) { return x.ig_status == '1' })
        .Where(function (x) { return parseInt(x.acc) >= parseInt(speed_from) })
        .Where(function (x) { return parseInt(x.acc) <= parseInt(speed_to) })
        .Count()
    }

    return speed_count;//30 + ',' + speed_count31;
}

function cal_9_io(cur_io, next_io, chanal_score, cb)
{

    var r = mark_9_bit(cur_io, next_io);//mark_9_bit('010001010', '010000000'); //

    var ar = r.split('');
    ar = { '1': ar[0], '2': ar[1], '3': ar[2], '4': ar[3], '5': ar[4], '6': ar[5], '7': ar[6], '8': ar[7], '9': ar[8] };
    var res = linq.Enumerable.From(ar)
      .Where("$.Value > 0")
      .Select("$.Key")
     .ToArray();

    for (var i = 0; i < res.length; i++)
    {
        //debugger;
        var v = parseInt(res[i]);
        switch (v) {
            case 1: { chanal_score[1] = parseInt(chanal_score[1]) + 1; } break;
            case 2: { chanal_score[2] = parseInt(chanal_score[2]) + 1; } break;
            case 3: { chanal_score[3] = parseInt(chanal_score[3]) + 1; } break;
            case 4: { chanal_score[4] = parseInt(chanal_score[4]) + 1; } break;
            case 5: { chanal_score[5] = parseInt(chanal_score[5]) + 1; } break;
            case 6: { chanal_score[6] = parseInt(chanal_score[6]) + 1; } break;
            case 7: { chanal_score[7] = parseInt(chanal_score[7]) + 1; } break;
            case 8: { chanal_score[8] = parseInt(chanal_score[8]) + 1; } break;
            case 9: { chanal_score[9] = parseInt(chanal_score[9]) + 1; } break;
        }
    }

    cb(chanal_score);
    return;

    //   var speed_count = linq.Enumerable.From(val).Select("$.Key").ToArray();
   
  //  console.log(val);
}

function chanal_9_io(res,cb)
{

    try
    {
        var sec_9_io = linq.Enumerable.From(res)
        .Select(function (x) { return { "sec_9_io": x.sio } })
        .ToArray();


        console.log('chanal_9_io length data' + sec_9_io.length);
      // console.log('chanal_9_io length data' + JSON.stringify(sec_9_io));

        var i = 0;  //54

        var chanal_score = { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }
       
     /*   var length = sec_9_io.length
        for (var i = 0; i < length; i++)
        {
            // console.log(sec_9_io[i]['sec_9_io']);
            var cur_io = sec_9_io[i]['sec_9_io']
            if (i != length - 1)
            {
                var next_io = sec_9_io[i + 1]['sec_9_io'];
                cal_9_io(cur_io, next_io, chanal_score, function (res) {
                    // console.log(res);
                    chanal_score = res;
                });
            } else {
                var next_io = sec_9_io[i]['sec_9_io'];
                cal_9_io(cur_io, next_io, chanal_score, function (res) {
                    // console.log(res);
                    chanal_score = res;
                    cb(chanal_score);
                    // setImmediate(chanal_score);
                    return
                });
            }
            //if (i == length)
            //{
            //    debugger;
            //    console.log('fin');
            //}
        }
        
         */
        async.eachSeries(sec_9_io, function (row, next)
        {
            var cur_io = row.sec_9_io;
          //  console.log(cur_io);
            
            if (i != sec_9_io.length - 1) 
            {
                // debugger;
                var next_io = sec_9_io[i + 1]['sec_9_io'];
                cal_9_io(cur_io, next_io, chanal_score, function (res) {
                    // console.log(res);
                    chanal_score = res;
                });
       

            } else {
                var next_io = sec_9_io[i]['sec_9_io'];
                cal_9_io(cur_io, next_io, chanal_score, function (res) {
                    // console.log(res);
                    chanal_score = res;
                });
            }
          
            i = i + 1;
            next();
        }, function () {
            //  debugger;
            //console.log('ch1-ch9 : ' +JSON.stringify( chanal_score));
             cb(chanal_score);
           // setImmediate(chanal_score);
            return
        });
   
    }
    catch (e) {
        debugger;
        console.log('chanal_9_io ' + e.message);

    }
}

function count_stop_over_30_min(res_keep) 
{
    var res = linq.Enumerable.From(res_keep)
   .Where(function (x) { return parseInt(x.zero_count) >= 1800 })// 60 sec * 30 min
   .Select(function (x) { return parseInt(x.zero_count) })
   .Sum();
    //res = sec2hhmmss(res);
    return res;
}



//#region  cal max_continuous_driving_time

function driving_temp() {
    this.time_id = "";
    this.sdiff = ""; 
}

function driving_keep()
{
    this.zero_start = "";
    this.zero_end = "";
    this.zero_count = "";
    this.drive_count = "";
    this.driving_start = "";
    this.driving_end = "";
  //  this.drive_sum = "";
}

function driving_summary(ar,cb)
{
    var sum = 0;
    var ires = [];

    async.eachSeries(ar, function (row, next)
    {
        var time_drive = row.drive_count;
        var time_stop = row.zero_count;


        if (time_stop < stop_time_dlt) {
            sum += time_drive + time_stop;

        }
        else {

            sum = sum + time_drive;
            ires.push(sum);
            sum = 0;

        }
        next();

    }, function () {
        ires.push(sum);
        var result = linq.Enumerable.From(ires).Max();
        cb(result);
        return;

    });

  
}

function drv_find_start_speed_zero(res_ar, time_old)
{
    var res = ' ';
    try{
        if (time_old == " ")
        {
            res = linq.Enumerable.From(res_ar)
          .Where(function (x) { return x.sdiff > '1' })
          .Select(function (x) { return { 'dt_sec': x.time_id } })
          .Take(1)
          .ToArray();
        }
        else
        {
            res = linq.Enumerable.From(res_ar)
           .Where(function (x) { return x.sdiff > '1' })
           .Where(function (x) { return x.time_id > time_old })
           .Select(function (x) { return { 'dt_sec': x.time_id } })
           .Take(1)
           .ToArray();
        }

        if (res.length > 0) {
            res = res[0].dt_sec;
        } else {
            res = " ";
        }
        return res;
    } catch (e)
    {
        console.log('drv_find_start_speed_zero ' + e.message);
    }
 
   
}

function drv_save_result_final(res_keep,i,start,end,start_drive)
{
   var res_stdrive = start_drive
   var res_endrive = add_second(start, -1);

  


    res_keep[i].zero_count =  total_second(start, end)+1;
    var drivecount = total_second(res_stdrive, res_endrive) + 1;

    if (drivecount > 0)
    {
        res_keep[i].driving_start = res_stdrive;
        res_keep[i].driving_end = res_endrive

        res_keep[i].drive_count = drivecount;

    } else {
        res_keep[i].driving_start = res_stdrive;
        res_keep[i].driving_end = res_stdrive;

        res_keep[i].drive_count = 0;
    }



    start_drive = add_second(end, 1);//for next start A
    return start_drive;
}

function drv_has_last_driving(res,res_keep,cb)
{
   debugger;
    try
    {
        var i = res_keep.length-1;
        var time = res_keep[i].zero_end;
        var drive_start_last = add_second(time, 1);

        var key_find = format_unix_date(drive_start_last, "YYYYMMDDHHmmss");
        var has_drive = linq.Enumerable.From(res)
        .Where(function (x) { return x.key == key_find })
        .Select(function (x) { return { 'dt_sec': iso_to_ndate(x.key) } })
        .Count();

        if (has_drive > 0)
        {
            //2014-08-02 17:08:24
        //    console.log(res);
            /*   */
            var drive_end_last = linq.Enumerable.From(res)
            .Select(function (x) { return { 'dt_sec': iso_to_ndate(x.key) } })
            .Last().dt_sec;

            dksp = new driving_keep();
            dksp.driving_start = drive_start_last;
            dksp.driving_end = drive_end_last;
            dksp.drive_count = total_second(drive_start_last, drive_end_last) + 1;
            
            
          
            if (parseInt(dksp.drive_count) < 0) { 
                dksp.drive_count = 0;
            } 

            dksp.zero_count = 0;
            res_keep.push(dksp);
         
        }

        cb(res_keep);
        return;
    } catch (e) {
        debugger
        console.log('drv_has_last_driving '+e.message);

    }
}

//Main cal
function max_continuous_driving(res,para,cb)
{

    var res_ar = [];
    var res_keep = [];
    var start_drive = ' ';
    var dksp = ' ';
    var _start_A =' ';
    var _stop_B = ' ';


    //++++++++++++++++++++++++ find data all parking when speed is zero +++++++++++++++++
    // sample data is   //2014-12-21 08:14:38

    var res_db = linq.Enumerable.From(res)
    .Where(function (x) { return x.s_speed == '0' })
    .Select(function (x) { return { 'dt_sec': iso_to_ndate(x.key) } })
    .ToArray()



    var end_loop = res_db.length;

    //+++++++++++++++++++++++++ find diff second current row[i] and row[i+1] 
    //sidiff = 1  ,time_id = 2014-12-21 08:54:56
    

    for (var i = 0; i < end_loop; i++)
    {
        if (i != end_loop - 1)
        {
      
            var cur_dt = res_db[i]['dt_sec'];
            var next_dt = res_db[i + 1]['dt_sec'];
            var res_diff = diff_second(cur_dt, next_dt);
           //console.log(next_dt + ' ' + res_diff);
            var temp = new driving_temp();
            temp.sdiff = res_diff;
            temp.time_id = next_dt;
            res_ar.push(temp);
        }
        else
        {
           // console.log('finish');
        }
    }

    // //+++++++++++++++++++++++++create key time for jump index ++++++++++++++++++++++

    var template = "{{#.}}{{time_id}},{{/.}}";
    var ar_time = mustache.render(template, res_ar);
    ar_time = ar_time.split(',');
    
//    console.log(ar_time);

    // find diffence datediff more then 1 sec 
    var zero_count = linq.Enumerable.From(res_ar)
   .Where(function (x) { return parseInt(x.sdiff) > 1 })
   .Count(); //find 



    //+++++++++++++++++++++ find duration of parking +++++++++++++++++++

    for (var i = 0; i <= zero_count; i++)
    {
        if (i > 0)
        {
            //for add new start zero before find new value
            dksp = new driving_keep();
            dksp.zero_start = _start_A;
            res_keep.push(dksp);

            _start_A = drv_find_start_speed_zero(res_ar, _start_A);

            if (_start_A != " ")
            {
                var idx_stop_B = _.indexOf(ar_time, _start_A) - 1;  //drv_find_stop_speed
                if (idx_stop_B > 0) {
                _stop_B = res_ar[idx_stop_B]['time_id'];
                    dksp.zero_end = _stop_B;
                }
            }
            else  //for final
            {
                dksp.zero_end = res_db[end_loop - 1]['dt_sec'];
            }

        }
        else  //for first time
        {
            _start_A = drv_find_start_speed_zero(res_ar, " ");
          

            var idx_stop_B = _.indexOf(ar_time, _start_A) - 1;  //drv_find_stop_speed
            if (idx_stop_B > 0) {
                _stop_B = res_ar[idx_stop_B]['time_id'];

                dksp = new driving_keep();
                dksp.zero_start = res_db[0]['dt_sec']; //first zero record
                dksp.zero_end = _stop_B;
                res_keep.push(dksp);
            } else {
                dksp = new driving_keep();
                dksp.zero_start = res_db[0]['dt_sec']; //first zero record
                dksp.zero_end = res_db[0]['dt_sec'];
                res_keep.push(dksp);
            }


        }

    }

    //+++++++++++++++++++++ find duration of driving +++++++++++++++++++
    //debugger;
    for (var i = 0; i < res_keep.length; i++)
    {
        var start = res_keep[i]['zero_start'];
        var end = res_keep[i]['zero_end'];
      

        if (i > 0)
        {
      
            start_drive = drv_save_result_final(res_keep, i, start, end, start_drive);
        }
        else
        {
            var has_first_start_driving = linq.Enumerable.From(res)
            .Where(function (x) { return x.s_speed > '0' })
            .Count();

            if (has_first_start_driving > 0) {
                debugger;
                var first_start_driving = linq.Enumerable.From(res)
                .Where(function (x) { return x.s_speed > '0' })
                .Select(function (x) { return { 'dt_sec': iso_to_ndate(x.key) } })
                .FirstOrDefault().dt_sec;

                start_drive = first_start_driving;
                start_drive = drv_save_result_final(res_keep, i, start, end, start_drive);
            }
            else {
                console.log('++++++ module max_continuous_driving +++++++++');
                console.log('!!!!!!! no start drinvig speed > 0 =' + has_first_start_driving);
            }



        }
        
    }

    //+++++++++++++++++++++ find 

    drv_has_last_driving(res, res_keep, function (res_keep)
    {
       // var x =JSON.stringify( res_keep);
        //console.log('data continue driving' +x);

        calculate_fuel_consumtion(para,res_keep)

        driving_summary(res_keep, function (sum_result)
        {
            var count_over_30_min =  count_stop_over_30_min(res_keep)
              
            // console.log('max_continuous_driving : ' + sum_result+' sec');
            var res = { 'max_continuous_driving': sum_result, 'count_stop_over_30_min': count_over_30_min };
            cb(res);
            return;
        });


    });



}


//#endregion

//#endregion

function calculate_fuel_consumtion(para,res_keep)
{
    var tb_history = para['tb_his'];
    var service_index_no = para['service_index_no'];

    var sum_moment_fuel_index = 0;
    async.eachSeries(res_keep, function (row, next)
    {
        //debugger;
        var start = row.driving_start;
        var end = row.driving_end;

        var is_corect_start = utl.is_valid_date(start);
        var is_corect_end = utl.is_valid_date(end);

        if (is_corect_start && is_corect_end)
        {
            getresult(start, end);
        }
        

        next();
    }, function ()
    {
       // debugger;
      
        var sql = " UPDATE service_index SET amount_of_fuel_lite=" + utl.sqote(sum_moment_fuel_index) + " WHERE service_index_no = " + utl.sqote(service_index_no);
        _iexcute(sql,function(res){
            console.log('calculate_fuel_consumtion '+res+' '+ sum_moment_fuel_index)
        });
    });

    function getresult(start, end)
    {

        var sql = " ";
        sql += "SELECT coalesce(MAX(moment_fuel_index)-MIN(moment_fuel_index),0) as sum_moment_fuel_index";
        sql += " FROM " + tb_history + " ";
        sql += " WHERE r_time >= " + utl.sqote(start) + "  AND r_time <= " + utl.sqote(end) + " ";

        _query_ar(sql, function (res)
        {
           // debugger;
            if (res.length > 0)
            {
                sum_moment_fuel_index += res[0]['sum_moment_fuel_index'];
               // console.log(res[0]['sum_moment_fuel_index']);
            }
            
        });
    }
    
}


//#region Cal Data #I


function get_data_i(tb_name, from_date, end_date, cb)
{
    var sql = " SELECT normal_status,event_type,to_char(r_time, 'YYYY-MM-DD HH24:MI:SS') as r_time,speed_gps,odo_meter FROM  " + tb_name;
    sql += " WHERE r_time >= " + utl.sqote(from_date) + " AND r_time <= " + utl.sqote(end_date)
    sql += " AND  (SELECT COUNT(tablename) FROM pg_tables WHERE tablename = " + utl.sqote(tb_name) + ")='1' ";

    //_query_ar(sql, function (res) {
    //    // console.log(res);
    //    console.log('length data #I = ' + res.length);
    //    cb(res);
    //    return;
    //})

    db.get_rows(iph, sql, function (ar) {
        console.log('length data #I = ' + ar.length);
        cb(ar);
        return;
    });
}

function make_report_sharp_i(tb_name, from_date, end_date, status) {

  //sql += " AND event_type=" + utl.sqote(status) + " ORDER BY R_TIME ";
    get_data_i(tb_name, from_date, end_date, function (res)
    {
        var status_41 = linq.Enumerable.From(res)
       .Where(function (x) { return x.event_type == '41' })
       .ToArray();
     
        var status_42 = linq.Enumerable.From(res)
        .Where(function (x) { return x.event_type == '42' })
        .ToArray();

      //  console.log(status_41 + ' ' + status_42);
    });
    

}

function total_idling_time(res,cb)
{
    var ar_x = linq.Enumerable.From(res)
 .Where(function (x) { return x.event_type == '31' })
 .Select(function (x) { return { "r_time": x.r_time, "status": x.event_type } })
 .OrderBy("$.r_time")
 .ToArray();

    var ar_y = linq.Enumerable.From(res)
  .Where(function (x) { return x.event_type == '32' })
  .Select(function (x) { return { "r_time": x.r_time, "status": x.event_type } })
  .OrderBy("$.r_time")
  .ToArray();

    //debugger;
    var ar = linq.Enumerable.From(ar_x).Union(ar_y).OrderBy("$.r_time")
   .ToArray();

    var temp = { "cur_time": " ", "next_time": " " };
    var next_time=" ";
    var next_status = " ";
    var iAr = new Array();

   
    for (var i = 0; i < ar.length; i++)
    {
        if (i != ar.length - 1)
        {
            var cur_time = ar[i]['r_time'];
            var cur_status = ar[i]['status'];

            next_time = ar[i + 1]['r_time'];
            next_status = ar[i + 1]['status'];

            if (cur_status == '31' && next_status == '32' && temp.cur_time ==" ")
            {
                var res = diff_second(cur_time, next_time);
                res = (res + 120)  // + 2 minute
                iAr.push(res);
               // console.log(cur_time + ' ' + next_time);
                i = i + 1;
            }
            else 
            {
                if (next_status == 31 && temp.cur_time == " ") //open  31
                {
                    temp.cur_time = next_time;
                }
                else if (next_status == 32 && temp.cur_time != " ") //close 32
                {
                    temp.next_time = next_time;
                    var res = diff_second(temp.cur_time, temp.next_time);
                    res = (res + 120)  // + 2 minute
                    iAr.push(res);
                  //  console.log(temp.cur_time + ' ' + temp.next_time);
                    temp.cur_time = " "; temp.next_time = " ";

                }
            }

        }
        //else
        //{
            
        //}
        
  }
  
    var sum_res = linq.Enumerable.From(iAr)
   .Sum()
    cb(sum_res);
    return;
}

function total_over_event(res,event_open,event_close,cb)
{
    var ar_x = linq.Enumerable.From(res)
 .Where(function (x) { return x.event_type == event_open })
 .Select(function (x) { return { "r_time": x.r_time, "event_type": x.event_type } })
 .OrderBy("$.r_time")
 .ToArray();

    //var json = JSON.stringify(ar_x);

    var ar_y = linq.Enumerable.From(res)
  .Where(function (x) { return x.event_type == event_close })
  .Select(function (x) { return { "r_time": x.r_time, "event_type": x.event_type } })
  .OrderBy("$.r_time")
  .ToArray();

    //diff_second

   // var xxx = linq.Enumerable.From(ar_y,ar_x)
   // .Select(function (ar_y, ar_x) { return { "event_type1": ar_y.event_type_y, "event_type2": ar_x.event_type_x } })
   // .Select("$.event_type1")
   // .ToArray();

    //diff_second(x.r_time,y.r_time) 

  //  var json = JSON.stringify(ar_y);

    //debugger;
    var ar = linq.Enumerable.From(ar_x).Union(ar_y).OrderBy("$.r_time")
   .ToArray();

    //var json = JSON.stringify(ar);
   // console.log('ar total_over_47_48'+json)

    var temp = { "cur_time": " ", "next_time": " " };
    var next_time = " "; 
    var next_status = " ";
    var cur_time = " ";
    var cur_status =" ";
    var iAr = new Array();

    for (var i = 0; i < ar.length; i++)
    {
        if (i != ar.length - 1)
        {
             cur_time = ar[i]['r_time'];
             cur_status = ar[i]['event_type'];

            next_time = ar[i + 1]['r_time'];
            next_status = ar[i + 1]['event_type'];

            if (cur_status == event_open && next_status == event_close && temp.cur_time == " ") {
                var res = diff_second(cur_time, next_time); //diff_min(cur_time, next_time);
                iAr.push(res);
              //  console.log(cur_time + ' ' + next_time);
                i = i + 1;
            }
            else
            {
                if (cur_status == event_open && temp.cur_time == " ") //open  31
                {
                    temp.cur_time = cur_time;
                }
                if (next_status == event_open && temp.cur_time == " ")//open  31
                {
                    temp.cur_time = next_time;
                }
                else if (next_status == event_close && temp.cur_time != " ") //close 32
                {
                    temp.next_time = next_time;
                    var res = diff_second(cur_time, next_time); //diff_min(temp.cur_time, temp.next_time);
                    iAr.push(res);
                 //   console.log(temp.cur_time + ' ' + temp.next_time);
                    temp.cur_time = " "; temp.next_time = " ";

                }
            }

        }
        else {
            console.log('hi');
        }
    }

    var sum_res = linq.Enumerable.From(iAr)
    .Sum()
    cb(sum_res);

    console.log('total_over_event :'+sum_res);

    return;
}



function total_over_rpm_time(res, event_open, event_close, cb)
{
    var ar_x = linq.Enumerable.From(res)
 .Where(function (x) { return x.event_type == event_open })
 .Select(function (x) { return { "r_time": x.r_time, "status": x.event_type } })
 .OrderBy("$.r_time")
 .ToArray();

    //var json = JSON.stringify(ar_x);

    var ar_y = linq.Enumerable.From(res)
  .Where(function (x) { return x.event_type == event_close })
  .Select(function (x) { return { "r_time": x.r_time, "status": x.event_type } })
  .OrderBy("$.r_time")
  .ToArray();

    console.log('event_type = 47 open ' + ar_x.length + ' event_type = 48 close ' + ar_y.length)

    //debugger;
    var ar = linq.Enumerable.From(ar_x).Union(ar_y).OrderBy("$.r_time")
   .ToArray();

    var temp = { "cur_time": " ", "next_time": " " };
    var next_time = " ";
    var next_status = " ";
    var iAr = new Array();


    for (var i = 0; i < ar.length; i++) {
        if (i != ar.length - 1) {
            var cur_time = ar[i]['r_time'];
            var cur_status = ar[i]['status'];

            next_time = ar[i + 1]['r_time'];
            next_status = ar[i + 1]['status'];

            if (cur_status == '47' && next_status == '48' && temp.cur_time == " ") {
                var res = diff_second(cur_time, next_time);
             
                iAr.push(res);
                // console.log(cur_time + ' ' + next_time);
                i = i + 1;
            }
            else {
                if (next_status == 47 && temp.cur_time == " ") //open  31
                {
                    temp.cur_time = next_time;
                }
                else if (next_status == 48 && temp.cur_time != " ") //close 32
                {
                    temp.next_time = next_time;
                    var res = diff_second(temp.cur_time, temp.next_time);
                  
                    iAr.push(res);
                    //  console.log(temp.cur_time + ' ' + temp.next_time);
                    temp.cur_time = " "; temp.next_time = " ";

                }
            }

        }
        //else
        //{

        //}

    }

    var sum_res = linq.Enumerable.From(iAr)
   .Sum()
    cb(sum_res);

    console.log('total_over_rpm_time :' + sum_res);

    return;
}

//#region old
function xx_total_over_rpm_time(res)
{
    var ar_x = linq.Enumerable.From(res)
.Where(function (x) { return x.event_type == '47' })
.Select(function (x) { return { "r_time": x.r_time, "event_type": x.event_type } })
.OrderBy("$.r_time")
.ToArray();

    var ar_y = linq.Enumerable.From(res)
  .Where(function (x) { return x.event_type == '48' })
  .Select(function (x) { return { "r_time": x.r_time, "event_type": x.event_type } })
  .OrderBy("$.r_time")
  .ToArray();

    //debugger;
    var ar = linq.Enumerable.From(ar_x).Union(ar_y).OrderBy("$.r_time")
   .ToArray();

    var temp = { "cur_time": " ", "next_time": " " };
    var next_time = " ";
    var next_status = " ";
    var cur_time = " ";
    var cur_status = " ";
    var iAr = new Array();

    for (var i = 0; i < ar.length; i++)
    {
        if (i != ar.length - 1)
        {
            cur_time = ar[i]['r_time'];
            cur_status = ar[i]['event_type'];

            next_time = ar[i + 1]['r_time'];
            next_status = ar[i + 1]['event_type'];

            if (cur_status == '47' && next_status == '48' && temp.cur_time == " ") {
                var res = diff_min(cur_time, next_time);
                iAr.push(res);
              //  console.log(cur_time + ' ' + next_time);
                i = i + 1;
            }
            else
            {
                if (cur_status == 47 && temp.cur_time == " ") //open  31
                {
                    temp.cur_time = cur_time;
                }
                if (next_status == 47 && temp.cur_time == " ")//open  31
                {
                    temp.cur_time = next_time;
                }
                else if (next_status == 48 && temp.cur_time != " ") //close 32
                {
                    temp.next_time = next_time;
                    var res = diff_min(temp.cur_time, temp.next_time);
                    iAr.push(res);
                  //  console.log(temp.cur_time + ' ' + temp.next_time);
                    temp.cur_time = " "; temp.next_time = " ";

                }
            }

        }
        else {

        }
    }
}

function total_over_rpm_time_old(res, event_open, event_close, cb) {
    debugger;
    var ar_x = linq.Enumerable.From(res)
 .Where(function (x) { return x.event_type == event_open })
 .Select(function (x) { return { "r_time_x": x.r_time, "event_type_x": x.event_type } })
 .OrderBy("$.r_time_x")
 .ToArray();

    //var json = JSON.stringify(ar_x);

    var ar_y = linq.Enumerable.From(res)
  .Where(function (x) { return x.event_type == event_close })
  .Select(function (x) { return { "r_time_y": x.r_time, "event_type_y": x.event_type } })
  .OrderBy("$.r_time_y")
  .ToArray();



    console.log('event_type = 47 open ' + ar_x.length + ' event_type = 48 close ' + ar_y.length)

    var iAr = new Array();
    for (var i = 0; i < ar_x.length; i++) {
        // console.log(i)//+' '+ar_x[i]["r_time_x"]+' '+ar_y[i]["r_time_y"])
        var v = diff_second(ar_x[i]["r_time_x"], ar_y[i]["r_time_y"]);
        iAr.push(v);
    }

    //#region
    //diff_second

    // var xxx = linq.Enumerable.From(ar_y, ar_x)
    // .Select(function (ar_y, ar_x) { return { "event_type1": ar_y.event_type_y, "event_type2": ar_x.event_type_x } })
    // .Select("$.event_type1")
    // .ToArray();

    //diff_second(x.r_time,y.r_time) 

    //  var json = JSON.stringify(ar_y);


    // var ar = linq.Enumerable.From(ar_x).Union(ar_y)//.OrderBy("$.r_time_x,$.r_time_y")
    //.Select(function (x) { return { "event_type1": diff_second(x.r_time_x, x.r_time_y) } })
    //.ToArray();



    //var json = JSON.stringify(ar);
    // console.log('ar total_over_47_48'+json)
    /*
    var temp = { "cur_time": " ", "next_time": " " };
    var next_time = " ";
    var next_status = " ";
    var cur_time = " ";
    var cur_status = " ";
    var iAr = new Array();

    for (var i = 0; i < ar.length; i++) {
        if (i != ar.length - 1) {
            cur_time = ar[i]['r_time'];
            cur_status = ar[i]['event_type'];

            next_time = ar[i + 1]['r_time'];
            next_status = ar[i + 1]['event_type'];

            if (cur_status == event_open && next_status == event_close && temp.cur_time == " ") {
                var res = diff_second(cur_time, next_time); //diff_min(cur_time, next_time);
                iAr.push(res);
                //  console.log(cur_time + ' ' + next_time);
                i = i + 1;
            }
            else {
                if (cur_status == event_open && temp.cur_time == " ") //open  31
                {
                    temp.cur_time = cur_time;
                }
                if (next_status == event_open && temp.cur_time == " ")//open  31
                {
                    temp.cur_time = next_time;
                }
                else if (next_status == event_close && temp.cur_time != " ") //close 32
                {
                    temp.next_time = next_time;
                    var res = diff_second(cur_time, next_time); //diff_min(temp.cur_time, temp.next_time);
                    iAr.push(res);
                    //   console.log(temp.cur_time + ' ' + temp.next_time);
                    temp.cur_time = " "; temp.next_time = " ";

                }
            }

        }
        else {
            console.log('hi');
        }
    }
    */
    //#endregion

    var sum_res = linq.Enumerable.From(iAr)
    .Sum()
    cb(sum_res);
    return;
}

//#endregion

//#endregion


//#region utility

function decode_io(io_sec) {
    var buf = io_sec.split(',');
    var row = [];
    for (var i = 0; i < buf.length; i++)
    {
        // var r = utl.zeroPad(parseInt(buf[i], 16).toString(2), 8);
        var t = parseInt(buf[i], 16).toString(2);
        var r = utl.zeroPad(t, 16);
        row.push(r);
    }

    var r = row.join(",");
    return r;
}

function prepare_io(io_sec) {

 //   var buf = io_sec;//"1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0";
    //buf = _.without(buf, ' ');
    //buf = _.without(buf, ',');
    var buf = io_sec.split(',');

    var split = function (arr) {
        var splitHelper = function (arr, odd, even) {
            if (arr.length == 0) {
                return { odd: odd, even: even };
            }
            odd.push(arr.splice(0, 1)[0]);
            arr[0] && even.push(arr.splice(0, 1)[0]);
            return splitHelper(arr, odd, even);
        };
        return splitHelper(arr, [], []);
    };

    buf = split(buf);

    var row = [];
    for (var i = 0; i < buf.odd.length; i++) {

        var hbit = utl.zeroPad(parseInt(buf.odd[i], 16).toString(2), 8);
        var lbit = utl.zeroPad(parseInt(buf.even[i], 16).toString(2), 8);
        var r = hbit + '' + lbit;
        r = r.split('') //split every char
        r = r[7] + r[6] + r[5] + r[4] + r[3] + r[2] + r[1] + r[0] + r[15] + r[14] + r[13] + r[12] + r[11] + r[10] + r[9] + r[8];
        row.push(r);
        // 1 000000000 00000
        //1000 0000 0000 0000
    }

    //  debugger;
    // console.log(row.join(","))
    var r = row.join(",");
    return r;

}

//++++++ Thank you for P'Mark support ++++++++ // ('010001010', '010000000'); //
function mark_9_bit(cur_io, next_io) { // ('1001', '1000'); //
    var x = parseInt(cur_io, 2);	// a = 10
    var y = parseInt(next_io, 2);	// b = 12
    var c = (x & ~y).toString(2);    	// ~((a & b) | (~a)).toString(2);    		        // a XOR b returns dec = 6, binary = 0110
    //console.log(c);
    return utl.zeroPad(c, 9);
}

//http://bateru.com/news/2011/03/javascript-binary-operations-the-easy-way/

function diff_second(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    //var diff = ts.totalMinutes().toFixed(2);
    //var diff2 = ts.totalDays().toFixed(2);
    var allsec = ts.totalSeconds();
    // console.log(allsec);
    return allsec;
}

function diff_day(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    //var diff = ts.totalMinutes().toFixed(2);
    var day = parseInt(ts.totalDays());

    // console.log(allsec);
    return day;
}

function diff_min(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var min = parseInt(ts.totalMinutes());
    // var day = parseInt(ts.totalDays());

    // console.log(allsec);
    return min;
}

function total_second(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var allsec = ts.totalSeconds();
    return allsec;
}

function total_minute_loop(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var allmin = parseInt(ts.totalMinutes()) + 1;
    return allmin;
}

function add_second(from_date, sec) {
    //2014-12-04 21:52:57
    var t = dateAdd(from_date, 'second', sec);
    t = utl.format_time(t);
    return t;
}

function dateAdd(date, interval, units) {
    var ret = new Date(date); //don't change original date
    switch (interval.toLowerCase()) {
        case 'year': ret.setFullYear(ret.getFullYear() + units); break;
        case 'quarter': ret.setMonth(ret.getMonth() + 3 * units); break;
        case 'month': ret.setMonth(ret.getMonth() + units); break;
        case 'week': ret.setDate(ret.getDate() + 7 * units); break;
        case 'day': ret.setDate(ret.getDate() + units); break;
        case 'hour': ret.setTime(ret.getTime() + units * 3600000); break;
        case 'minute': ret.setTime(ret.getTime() + units * 60000); break;
        case 'second': ret.setTime(ret.getTime() + units * 1000); break;
        default: ret = undefined; break;
    }
    return ret;
}

function format_unix_date(dt, format) {
    return moment(dt).format(format);
}

function sec2hhmmss(sec) {
    var ts = timespan.fromSeconds(sec); //90
    //debugger;
    //console.log(ts.seconds()); // 30
    //console.log(ts.minutes()); // 1
    //var s = 
    var s = ts.hours + ':' + ts.minutes + ':' + ts.seconds;
    return s;
}

function min2sec(min) {
    var ts = timespan.fromMinutes(min);
    //  console.log(ts);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.totalSeconds();
        }
    })
    
    return result;
}

function HOUR(sec) {
    var ts = timespan.fromSeconds(sec);
  //  console.log(ts);
    var result = 0;
    utl.is_undefined(ts,function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.hours;
        }
    })
   
    return result;
}

function MINUTE(sec) {
    var ts = timespan.fromSeconds(sec);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.minutes;
        }
    })

    return result;

}

function SECOND(sec) {
    var ts = timespan.fromSeconds(sec);
    var result = 0;
    utl.is_undefined(ts, function (is_true) {
        if (is_true) {
            result = 0;
        } else {
            result = ts.seconds;
        }
    })

    return result;
}

//http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object

/*
select mv.vehicle_code,mvd.device_serial_number,mvd.sim1_management_number from master_vehicle mv left join master_vehicle_device_management mvd on(mv.vehicle_vedevice_serial_no = mvd.vehicle_vedevice_serial_no)
left join master_device_setting md on(mvd.device_setting_code = md.device_setting_code)
*/

function iso_to_ndate(uxdate) {
    var dt = uxdate.match(/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/);
    var s = dt[1] + '-' + dt[2] + '-' + dt[3] + ' ' + dt[4] + ':' + dt[5] + ':' + dt[6];
    return s;
}

function _query_ar(sql, cb) {


    db.get_rows(ipm, sql, function (ar) {
      //  console.log('length data sec ' + ar.length);
        cb(ar);
        return;
    });

}

function _iexcute(sql, callback) {

    db.excute(ipm, sql, function (is_ok) {
        callback(is_ok);
    });
}

function write_text(res) {
    fs.writeFile('x1.txt', res, function (err) {
        if (err) throw err;
        console.log('It\'s saved! in same location.');
    });
}

function gen_ar() {
    debugger;
    var s = ' ';
    for (var j = 0; j <= 59; j++) {
        s += '"' + utl.zeroPad(j, 2) + '":ar[' + j + '],';
    }
    console.log(s);
}

function test2() {
    debugger;
    var d = "34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34"

    var ar = d.split(',');

    var q = { "00": ar[0], "01": ar[1], "02": ar[2], "03": ar[3], "04": ar[4], "05": ar[5], "06": ar[6], "07": ar[7], "08": ar[8], "09": ar[9], "10": ar[10], "11": ar[11], "12": ar[12], "13": ar[13], "14": ar[14], "15": ar[15], "16": ar[16], "17": ar[17], "18": ar[18], "19": ar[19], "20": ar[20], "21": ar[21], "22": ar[22], "23": ar[23], "24": ar[24], "25": ar[25], "26": ar[26], "27": ar[27], "28": ar[28], "29": ar[29], "30": ar[30], "31": ar[31], "32": ar[32], "33": ar[33], "34": ar[34], "35": ar[35], "36": ar[36], "37": ar[37], "38": ar[38], "39": ar[39], "40": ar[40], "41": ar[41], "42": ar[42], "43": ar[43], "44": ar[44], "45": ar[45], "46": ar[46], "47": ar[47], "48": ar[48], "49": ar[49], "50": ar[50], "51": ar[51], "52": ar[52], "53": ar[53], "54": ar[54], "55": ar[55], "56": ar[56], "57": ar[57], "58": ar[58], "59": ar[59] };


    /*
        var val = linq.Enumerable.From(q)
                         .Where( "$.Key" >= 10 )
                        .Select("$.Value")
                        .ToArray();
    
       var key = linq.Enumerable.From(q)
                    .Select("$.Key")
                    .ToArray();
    
       console.log(val +' '+key);
       // From(obj).Select("$.Key + ':' + $.Value")
      //  var template ='{{#.}}{{00}},{{01}},{{02}},{{03}},{{04}},{{05}},{{06}},{{07}},{{08}},{{09}},{{10}},{{11}},{{12}},{{13}},{{14}},{{15}},{{16}},{{17}},{{18}},{{19}},{{20}},{{21}},{{22}},{{23}},{{24}},{{25}},{{26}},{{27}},{{28}},{{29}},{{30}},{{31}},{{32}},{{33}},{{34}},{{35}},{{36}},{{37}},{{38}},{{39}},{{40}},{{41}},{{42}},{{43}},{{44}},{{45}},{{46}},{{47}},{{48}},{{49}},{{50}},{{51}},{{52}},{{53}},{{54}},{{55}},{{56}},{{57}},{{58}},{{59}}{{/.}}';
      //  var s = mustache.render(template, ar);
      //  console.log(s);
      */
}

//#endregion

//+++++++++++++++++++++++++++++++  Calculate Eval +++++++++++++++++++++++++++

//#region cal eval

function is_use_driving_or_transit(criterion_code, cb) {
    var sql = " SELECT idling_eval_item";
    sql += " FROM master_eval_criterion ";
    sql += " WHERE eval_criterion_code ='" + criterion_code + "' LIMIT 1 ";
    _query_ar(sql, function (res) {
        cb(res);
        return;
    })
}

function get_eva_creteria(criterion_code, cb)
{
var sql =" SELECT eval_item_code as code ";
    sql+=",eval_item_name as name ";
    sql+=",eval_unit_name as unit";
    sql+=",data_minimum_1 as min1,data_maximum_1 as max1,data_minimum_2 as min2,data_maximum_2 as max2";
    sql+=",data_minimum_3 as min3,data_maximum_3 as max3,data_minimum_4 as min4,data_maximum_4 as max4";
    sql+=",data_minimum_5 as min5,data_maximum_5 as max5";
    sql+=",eval_rank_1 as evr1,point_1 as p1";
    sql+=",eval_rank_2 as evr2,point_2 as p2";
    sql+=",eval_rank_3 as evr3,point_3 as p3";
    sql+=",eval_rank_4 as evr4,point_4 as p4";
    sql +=",eval_rank_5 as evr5,point_5 as p5";
  
    sql+=" FROM master_eval_criterion ";
    sql += " WHERE eval_criterion_code ='" + criterion_code + "' ";
      // AND eval_item_code > '03'
    sql += "   ORDER BY eval_item_code ";
    _query_ar(sql, function (res) {
        cb(res);
        return;
    })
}

function get_selection_io(criterion_code, cb) {
    var sql = " SELECT selection_item_code ";
    sql += " FROM master_eval_criterion ";
    sql += " WHERE eval_criterion_code ='" + criterion_code + "' AND eval_item_code >='15' AND eval_item_code <='17' ";
    sql += " ORDER BY eval_item_code ";

    //setting.analog_ch1
    var r = { "analog_ch1": "", "analog_ch2": "", "analog_ch3": "" } 

    _query_ar(sql, function (res) {
        // r.setting.analog_ch1
        r.analog_ch1 = res[0]["selection_item_code"] != "" ? res[0]["selection_item_code"] : 0;
        r.analog_ch2 = res[1]["selection_item_code"] != "" ? res[1]["selection_item_code"] : 0;
        r.analog_ch3 = res[2]["selection_item_code"] != "" ? res[2]["selection_item_code"] : 0;
       cb(r);
        //cb(res);
        return;
    })
}

function Evarank(x,y) {
    var v = ROUNDDOWN(y / x * 100, 1);
    return v;
}

/*
ROUNDDOWN(Y8/(HOUR($Z$3)+(MINUTE($Z$3)/60)+(SECOND($Z$3)/3600)),1)
*/

function ROUNDDOWN(number, decimals) {
    //console.log();
    var v = Math.floor(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
    return v;
}

function Time_of_x(xi, driving_time_sec) {
    var $X$3 = driving_time_sec;
    return ROUNDDOWN(xi / $X$3, 3) * 100
}

function Number_of_time(xi,driving_time_sec) {
    var $X$3 = driving_time_sec;
    var xres = ROUNDDOWN(xi / (HOUR($X$3) + (MINUTE($X$3) / 60) + (SECOND($X$3) / 3600)), 1);
    return xres;
}

function cal_evaluate(value,eva_creteria, item_code,cb)
{
  
    var t = parseInt(value);
    var mark = 0;
    var v_grade = 0;
    var result = { 'point': 0, 'rank': 0 };
   //var result = {'point':' ','rank':' '};

    get_eva_creteria(eva_creteria, function (res) {
        // console.log(res);
        var v = linq.Enumerable.From(res)
         .Where(function (x) { return x.code == item_code })
        .ToArray()[0];

        switch (true) {
            case (t >= v.min1 && t <= v.max1): { mark = v.p1; v_grade = v.evr1;  } break;
            case (t >= v.min2 && t <= v.max2): { mark = v.p2; v_grade = v.evr2;  } break;
            case (t >= v.min3 && t <= v.max3): { mark = v.p3; v_grade = v.evr3;  } break;
            case (t >= v.min4 && t <= v.max4): { mark = v.p4; v_grade = v.evr4;  } break;
            case (t >= v.min5 && t <= v.max5): { mark = v.p5; v_grade = v.evr5; } break;
            default : { mark = v.p5; v_grade = v.evr5; } break;
        }

        result.rank = v_grade;
        result.point = mark;
        cb(result);
        return;

    });
}

function cal_evaluate_secfrom_min(value, eva_creteria, item_code, cb) {
    
    var t = parseInt(value);
    var mark = 0;
    var v_grade = 0;
    var result = { 'point': 0, 'rank': 0 };
    //var result = {'point':' ','rank':' '};
    
    get_eva_creteria(eva_creteria, function (res) {
        // console.log(res);
        var v = linq.Enumerable.From(res)
         .Where(function (x) { return x.code == item_code })
        .ToArray()[0];
        
        switch (true) {
            case (t >= min2sec(v.min1) && t <= min2sec(v.max1)) : { mark = v.p1; v_grade = v.evr1; } break;
            case (t >= min2sec(v.min2) && t <= min2sec(v.max2)) : { mark = v.p2; v_grade = v.evr2; } break;
            case (t >= min2sec(v.min3) && t <= min2sec(v.max3)) : { mark = v.p3; v_grade = v.evr3; } break;
            case (t >= min2sec(v.min4) && t <= min2sec(v.max4)) : { mark = v.p4; v_grade = v.evr4; } break;
            case (t >= min2sec(v.min5) && t <= min2sec(v.max5)) : { mark = v.p5; v_grade = v.evr5; } break;
            default : { mark = v.p5; v_grade = v.evr5; } break;
        }
        
        result.rank = v_grade;
        result.point = mark;
        cb(result);
        return;

    });
}


function sum_eval(struc, point,is_save_drv,is_save_eco,cb)
{
    //debugger;
    if (is_save_drv) {
        struc.sum_safe_driving += point;
    }
  
    if (is_save_eco) {
        struc.sum_eco_driving += point;
    }

    struc.sum_overall_driving += point;
    cb(true);
    return;
}

function summary_all(x,y) {
    var v = ROUNDDOWN(y / x * 100, 1);
    return v;
}

//#endregion


//#region main cal eval
/**/
function main_cal_eval(eva_creteria, struc,cb)
{
    debugger;
    var val = struc;
    var driving_time = val.transit_time;
 
    var res1 = false, res2 = false, res3 = false, res4 = false, res5 = false, res6 = false, res7 = false, res8 = false, res9 = false, res10 = false, res11 = false, res13 = false, res14 = false, res15 = false;
    var v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15=0;

    cal_evaluate(val.max_speed, eva_creteria, item_code.maximum_speed, function (res) {
        struc.eval_point_max_speed = res.point;
        struc.eval_rank_max_speed = res.rank;
        sum_eval(struc, res.point, true, false, function (is_fin) {
            if (is_fin) {
                res1 = true;
            }
        });
       // console.log('1');
       
        next();
    })

    v2 = Number_of_time(val.over_speed_count, driving_time)
    cal_evaluate(v2, eva_creteria, item_code.overspeed_times_count, function (res) {
        //debugger;
        struc.eval_point_overspeed_count = res.point;
        struc.eval_rank_overspeed_count = res.rank;
        sum_eval(struc, res.point, true, true, function (is_fin) {
            if (is_fin) {
                res2 = true;
            }
        });
       // console.log('2');
        next();

    })

    v3 = Time_of_x(val.over_speed_time, driving_time);
    cal_evaluate(v3, eva_creteria, item_code.overspeed_period_time, function (res) {
        // debugger;
        struc.eval_point_overspeed_time = res.point;
        struc.eval_rank_overspeed_time = res.rank;
        sum_eval(struc, res.point, true, true, function (is_fin) {
            if (is_fin) {
                res3 = true;
            }
        });
       // console.log('3');
        //res3 = true;
        next();
    })


    v4 = Number_of_time(val.over_rpm_count, driving_time);
    cal_evaluate(v4, eva_creteria, item_code.rpm_times_count, function (res) {
       // debugger;
        struc.eval_point_overrpm_count = res.point;
        struc.eval_rank_overrpm_count = res.rank;
        sum_eval(struc, res.point, false, true, function (is_fin) {
            if (is_fin) {
                res4 = true;
            }
        });
        //console.log('4');
       // res4 = true;
        next();
    })


    v5 = Time_of_x(val.over_rpm_time, driving_time);
    cal_evaluate(v5, eva_creteria, item_code.rpm_period_time, function (res) {
       // debugger;
        struc.eval_point_overrpm_time = res.point;
        struc.eval_rank_overrpm_time = res.rank;
        sum_eval(struc, res.point, false, true, function (is_fin) {
            if (is_fin) {
                res5 = true;
            }
        });
       // console.log('5');
       // res5 = true;
        next();
    })


    v6 = Number_of_time(val.sudden_start_count, driving_time);
    cal_evaluate(v6, eva_creteria, item_code.abruptly_starts_times_count, function (res) {
       // debugger;
        struc.eval_point_sudden_start_count = res.point;
        struc.eval_rank_sudden_start_count = res.rank;
        sum_eval(struc, res.point, true, true, function (is_fin) {
            if (is_fin) {
                res6 = true;
            }
        });
       // console.log('6');
        //res6 = true;
        next();
    })


    v7 = Number_of_time(val.acceleration_count, driving_time);
    cal_evaluate(v7, eva_creteria, item_code.abruptly_accelerates_times_count, function (res) {
       // debugger;
        struc.eval_point_acceleration_count = res.point;
        struc.eval_rank_acceleration_count = res.rank;
        sum_eval(struc, res.point, true, true, function (is_fin) {
            if (is_fin) {
                res7 = true;
            }
        });
       // console.log('7');
       // res7 = true;
        next();
    })


    v8 = Number_of_time(val.deceleration_count, driving_time);
    cal_evaluate(v8, eva_creteria, item_code.abruptly_decelerates_times_count, function (res) {
       // debugger;
        struc.eval_point_deceleration_count = res.point;
        struc.eval_rank_deceleration_count = res.rank;
        sum_eval(struc, res.point, true, false, function (is_fin) {
            if (is_fin) {
                res8 = true;
            }
        });
        //console.log('8');
       // res8 = true;
        next();
    })

    is_use_driving_or_transit(eva_creteria, function (res)
    {
      
   
        if (res.length > 0) {
          var x_transittime   = res[0].idling_eval_item == '01' ?  struc.driving_time :  struc.transit_time
            v9 = Time_of_x(val.total_idling_time, x_transittime);
            cal_evaluate(v9, eva_creteria, item_code.idling_time, function (res) {
                // debugger;r
                struc.eval_point_idling_time = res.point;
                struc.eval_rank_idling_time = res.rank;
                sum_eval(struc, res.point, false, true, function (is_fin) {
                    if (is_fin) {
                        res9 = true;
                    }
                });
                // console.log('9');
                // res9 = true;
                next();
            })
        }
 
    })



    v10 = Time_of_x(val.max_continuous_driving_time, driving_time);
    cal_evaluate_secfrom_min(v10, eva_creteria, item_code.hours_of_continuous_driving, function (res) {
        // debugger;
        struc.eval_point_continuous_driving_time = res.point;
        struc.eval_rank_continuous_driving_time = res.rank;
        sum_eval(struc, res.point, true, false, function (is_fin) {
            if (is_fin) {
                res10 = true;
            }
        });
       // console.log('10 ' + v10);
       // res10 = true;
        next();
    })


    v11 = Number_of_time(val.dangerous_sign_count, driving_time);
    cal_evaluate(v11, eva_creteria, item_code.sign_of_danger, function (res) {
       // debugger;
        struc.eval_point_dangerous_sign_count = res.point;
        struc.eval_rank_dangerous_sign_count = res.rank;
        sum_eval(struc, res.point, true, false, function (is_fin) {
            if (is_fin) {
                res11 = true;
            }
        });
       // console.log('11');
       // res11 = true;
        next();
    })


    v13 = Number_of_time(struc.selection1, driving_time);
    cal_evaluate(v13, eva_creteria, item_code.selection_1, function (res) {
        struc.eval_point_select_item1 = res.point;
        struc.eval_rank_select_item1 = res.rank;
        res13 = true;
        next();
    });


    v14 = Number_of_time(struc.selection2, driving_time);
    cal_evaluate(v14, eva_creteria, item_code.selection_2, function (res) {
            struc.eval_point_select_item2 = res.point;
            struc.eval_rank_select_item2 = res.rank;
            res14 = true;
            next();
    });


    v15 = Number_of_time(struc.selection3, driving_time);
    cal_evaluate(v15, eva_creteria, item_code.selection_3, function (res) {
        struc.eval_point_select_item3 = res.point;
        struc.eval_rank_select_item3 = res.rank;
       // console.log('15');
        res15 = true;
        next();
    });





    function next() {
        if (res1 && res2 && res3 && res4 && res5 && res6 && res7 && res8 && res9 && res10 && res11 && res13 && res14 && res15 ) {
            // cb(null, [response1, response2]);
             debugger;
        
                var s_01 = summary_all(demominatar.overall, struc.sum_overall_driving);
                cal_evaluate(s_01, eva_creteria, item_code.overall, function (res) {
                    debugger;
                    struc.overall_driving_point = s_01;//res.point;
                    struc.overall_driving_rank = res.rank;
                    console.log('summary_all(overall,sum_overall_driving)  ' + demominatar.overall + ' ' + struc.sum_overall_driving + ' result is =' + s_01 + ' rank ' + res.rank);

                    var s_02 = summary_all(demominatar.safe, struc.sum_safe_driving);
                    cal_evaluate(s_02, eva_creteria, item_code.safe, function (res) {
                       // debugger;
                        struc.safe_driving_point = s_02; //res.point;
                        struc.safe_driving_rank = res.rank;
                        console.log('summary_all(safe,sum_safe_driving)  ' + demominatar.safe + ' ' + struc.sum_safe_driving + ' result is =' + s_02 + ' rank ' + res.rank);

                        var s_03 = summary_all(demominatar.eco, struc.sum_eco_driving);
                        cal_evaluate(s_03, eva_creteria, item_code.eco, function (res) {
                           // debugger;
                            struc.eco_driving_point = s_03;// res.point;
                            struc.eco_driving_rank = res.rank;

                            console.log('summary_all(eco,sum_eco_driving)  ' + demominatar.eco + ' ' + struc.sum_eco_driving + ' result is =' + s_03 + ' rank ' + res.rank);
               
                               // var ires = { 'final': struc, 'is_fin': true };
                                cb(struc);
                                return;

                        });


                    });

                });
          
        }
    }

}

//#endregion

//If you want to round down to 3 decimal places, then put 3 into decimals

/*
service index
0 = ยังไม่ได้จบ
1 = จบแล้ว แต่ยังไม่ทำ report
2 = ทำเรียบร้อยแล้ว



setTimeout(function ()
{
    debugger;
 //var x =  min2sec(60)

  start();
    // test();
   // rerun_update();
}, 1000);
*/

function test() {
    get_left_comlumn('99000060', function (res) {
        debugger;
        console.log(res);
    });
}


setInterval(function () {
    console.log('start yazaki_service_index');
    start();
}, 60000);


function update_service_index(para,r,t,cb) {
 
    //
    //.set('is_ok_rawdata', data.status)
    //.set('row_count', data.row_count)
    //.set('idate_start', utcp.now())
    //debugger;
    var start_time = para.start_time;//'2014-12-05 09:22:10'; //
    var vehicle_code = para.vehicle_code;//'10000001';
   
    var sql = squel.update()
    .table('service_index')
    .set('transit_time',r.transit_time)
    .set('total_distance',utl.fixed(r.total_distance),3)
    .set('max_speed',r.max_speed)
    .set('avg_speed', utl.fixed(r.avg_speed,3))
    .set('over_speed_count',r.over_speed_count)
    .set('over_speed_time',r.over_speed_time)
    .set('max_rpm',r.max_rpm)
    .set('over_rpm_count',r.over_rpm_count)
    .set('over_rpm_time',r.over_rpm_time)
    .set('start_distance',utl.fixed(r.start_distance),3)
    .set('end_distance', utl.fixed(r.end_distance), 3)
    .set('sudden_start_count',r.sudden_start_count)
    .set('acceleration_count',r.acceleration_count)
    .set('deceleration_count',r.deceleration_count)
    .set('total_idling_time',r.total_idling_time)
    .set('total_throttle_opening_time',r.total_throttle_opening_time)
    .set('max_continuous_driving_time', r.max_continuous_driving_time)
    .set('dangerous_sign_count', r.dangerous_sign_count)

    .set('ch1_count',r.ch1_count)
    .set('ch2_count',r.ch2_count)
    .set('ch3_count',r.ch3_count)
    .set('ch4_count',r.ch4_count)
    .set('ch5_count',r.ch5_count)
    .set('ch6_count',r.ch6_count)
    .set('ch7_count',r.ch7_count)
    .set('ch8_count',r.ch8_count)
    .set('ch9_count', r.ch9_count)



    .set('speed_histogram_1',r.speed_histogram_1)
    .set('speed_histogram_2',r.speed_histogram_2)
    .set('speed_histogram_3',r.speed_histogram_3)
    .set('speed_histogram_4',r.speed_histogram_4)
    .set('speed_histogram_5',r.speed_histogram_5)
    .set('speed_histogram_6',r.speed_histogram_6)
    .set('speed_histogram_7',r.speed_histogram_7)
    .set('speed_histogram_8', r.speed_histogram_8)

    .set('low_speed_max_rpm', r.low_speed_max_rpm)
    .set('high_speed_max_rpm', r.high_speed_max_rpm)

    .set('low_speed_rpm_histogram_1',r.low_speed_rpm_histogram_1)
    .set('low_speed_rpm_histogram_2', r.low_speed_rpm_histogram_2)
    .set('low_speed_rpm_histogram_3', r.low_speed_rpm_histogram_3)
    .set('low_speed_rpm_histogram_4', r.low_speed_rpm_histogram_4)
    .set('low_speed_rpm_histogram_5', r.low_speed_rpm_histogram_5)
    .set('low_speed_rpm_histogram_6', r.low_speed_rpm_histogram_6)
    .set('low_speed_rpm_histogram_7', r.low_speed_rpm_histogram_7)
    .set('low_speed_rpm_histogram_8', r.low_speed_rpm_histogram_8)

    .set('high_speed_rpm_histogram_1', r.high_speed_rpm_histogram_1)
    .set('high_speed_rpm_histogram_2', r.high_speed_rpm_histogram_2)
    .set('high_speed_rpm_histogram_3', r.high_speed_rpm_histogram_3)
    .set('high_speed_rpm_histogram_4', r.high_speed_rpm_histogram_4)
    .set('high_speed_rpm_histogram_5', r.high_speed_rpm_histogram_5)
    .set('high_speed_rpm_histogram_6', r.high_speed_rpm_histogram_6)
    .set('high_speed_rpm_histogram_7', r.high_speed_rpm_histogram_7)
    .set('high_speed_rpm_histogram_8', r.high_speed_rpm_histogram_8)

    .set('acceleration_histogram_1', r.acceleration_histogram_1)
    .set('acceleration_histogram_2', r.acceleration_histogram_2)
    .set('acceleration_histogram_3', r.acceleration_histogram_3)
    .set('acceleration_histogram_4', r.acceleration_histogram_4)
    .set('acceleration_histogram_5', r.acceleration_histogram_5)
    .set('acceleration_histogram_6', r.acceleration_histogram_6)
    .set('acceleration_histogram_7', r.acceleration_histogram_7)
    .set('acceleration_histogram_8', r.acceleration_histogram_8)

    .set('deceleration_histogram_1', r.deceleration_histogram_1)
    .set('deceleration_histogram_2', r.deceleration_histogram_2)
    .set('deceleration_histogram_3', r.deceleration_histogram_3)
    .set('deceleration_histogram_4', r.deceleration_histogram_4)
    .set('deceleration_histogram_5', r.deceleration_histogram_5)
    .set('deceleration_histogram_6', r.deceleration_histogram_6)
    .set('deceleration_histogram_7', r.deceleration_histogram_7)
    .set('deceleration_histogram_8', r.deceleration_histogram_8)

    .set('accelerator_histogram_1', r.accelerator_histogram_1)
    .set('accelerator_histogram_2', r.accelerator_histogram_2)
    .set('accelerator_histogram_3', r.accelerator_histogram_3)
    .set('accelerator_histogram_4', r.accelerator_histogram_4)
    .set('accelerator_histogram_5', r.accelerator_histogram_5)
    .set('accelerator_histogram_6', r.accelerator_histogram_6)
    .set('accelerator_histogram_7', r.accelerator_histogram_7)
    .set('accelerator_histogram_8', r.accelerator_histogram_8)

   
    .set('safe_driving_point', r.safe_driving_point)
    .set('eco_driving_point', r.eco_driving_point)
    .set('overall_driving_point', r.overall_driving_point)

    .set('safe_driving_rank', r.safe_driving_rank)
    .set('eco_driving_rank', r.eco_driving_rank)
    .set('overall_driving_rank', r.overall_driving_rank)

    .set('eval_point_max_speed', r.eval_point_max_speed)
    .set('eval_point_overspeed_count', r.eval_point_overspeed_count)
    .set('eval_point_overspeed_time', r.eval_point_overspeed_time)
    .set('eval_point_overrpm_count', r.eval_point_overrpm_count)
    .set('eval_point_overrpm_time', r.eval_point_overrpm_time)
    .set('eval_point_sudden_start_count', r.eval_point_sudden_start_count)
    .set('eval_point_acceleration_count', r.eval_point_acceleration_count)
    .set('eval_point_deceleration_count', r.eval_point_deceleration_count)
    .set('eval_point_idling_time', r.eval_point_idling_time)
    .set('eval_point_continuous_driving_time', r.eval_point_continuous_driving_time)
    .set('eval_point_sign_of_danger',r.eval_point_dangerous_sign_count)
    .set('eval_point_select_item1', r.eval_point_select_item1)
    .set('eval_point_select_item2', r.eval_point_select_item2)
    .set('eval_point_select_item3', r.eval_point_select_item3)

    .set('eval_rank_max_speed', r.eval_rank_max_speed)
    .set('eval_rank_overspeed_count', r.eval_rank_overspeed_count)
    .set('eval_rank_overspeed_time', r.eval_rank_overspeed_time)
    .set('eval_rank_overrpm_count', r.eval_rank_overrpm_count)
    .set('eval_rank_overrpm_time', r.eval_rank_overrpm_time)
    .set('eval_rank_sudden_start_count', r.eval_rank_sudden_start_count)
    .set('eval_rank_acceleration_count', r.eval_rank_acceleration_count)
    .set('eval_rank_deceleration_count', r.eval_rank_deceleration_count)
    .set('eval_rank_idling_time', r.eval_rank_idling_time)
    .set('eval_rank_continuous_driving_time', r.eval_rank_continuous_driving_time)
    .set('eval_rank_sign_of_danger', r.eval_rank_dangerous_sign_count)
    .set('eval_rank_select_item1', r.eval_rank_select_item1)
    .set('eval_rank_select_item2', r.eval_rank_select_item2)
    .set('eval_rank_select_item3', r.eval_rank_select_item3)
    .set('stop_times_over_30min', r.stop_times_over_30)
 
 /* .set('eval_rank_driving_to_back_count', r.eval_rank_driving_to_back_count)
    .set('eval_rank_start_out_count', r.eval_rank_start_out_count)

    .set('eval_point_start_out_count', r.eval_point_start_out_count)
    .set('eval_point_driving_to_back_count', r.eval_point_driving_to_back_count)
    */
     //#endregion

    .set('threshhold_of_over_speed', t.threshhold_of_over_speed)
      .set('low_speed_area_threshold_of_over_rpm', t.low_speed_area_threshold_of_over_rpm)
      .set('high_speed_area_threshold_of_over_rpm', t.high_speed_area_threshold_of_over_rpm)
      .set('constant_speed_to_check', t.constant_speed_to_check)
      .set('threshold_of_rapid_start', t.threshold_of_rapid_start)
      .set('threshold_of_rapid_accel', t.threshold_of_rapid_accel)
      .set('threshold_of_rapid_decel', t.threshold_of_rapid_decel)
      .set('cancel_alarm_over_rmp', t.cancel_alarm_over_rmp)
      .set('idling_rpm', t.idling_rpm)
      .set('operation_mode', t.operation_mode)
      .set('rpm_sensor_existence', t.rpm_sensor_existence)
      .set('external_ch1_existence', t.external_ch1_existence)
      .set('external_ch2_existence', t.external_ch2_existence)
      .set('external_ch3_existence', t.external_ch3_existence)
      .set('external_ch4_existence', t.external_ch4_existence)
      .set('external_ch5_existence', t.external_ch5_existence)
      .set('external_ch6_existence', t.external_ch6_existence)
      .set('external_ch7_existence', t.external_ch7_existence)
      .set('external_ch8_existence', t.external_ch8_existence)
      .set('external_ch9_existence', t.external_ch9_existence)
      .set('temperachure_ch1_existence', t.temperachure_ch1_existence)
      .set('temperachure_ch2_existence', t.temperachure_ch2_existence)
      .set('temperachure_ch3_existence', t.temperachure_ch3_existence)
      .set('analog_sensor_existence', t.analog_sensor_existence)
      .set('fuel_analog_sensor_existence', t.fuel_analog_sensor_existence)
      .set('product_model', t.product_model)



    .set('report_time', utcp.now())
    .set('report_flag','2')
    .where("vehicle_code='" + vehicle_code + "'")
    .where("service_start_time='" + start_time + "'")
    .toString();
   
   
 //  console.log(sql);
    _iexcute(sql, function (r)
    {
        //debugger;
        // console.log(r);
        cb(r);
        return;
    });
}

function test_set_left_column(vehicle_code,t,callback)
{
    //debugger;
    var sql = squel.update()
     .table('service_index')
      .set('threshhold_of_over_speed', t.threshhold_of_over_speed)
      .set('low_speed_area_threshold_of_over_rpm', t.low_speed_area_threshold_of_over_rpm)
      .set('high_speed_area_threshold_of_over_rpm', t.high_speed_area_threshold_of_over_rpm)
      .set('constant_speed_to_check', t.constant_speed_to_check)
      .set('threshold_of_rapid_start', t.threshold_of_rapid_start)
      .set('threshold_of_rapid_accel', t.threshold_of_rapid_accel)
      .set('threshold_of_rapid_decel', t.threshold_of_rapid_decel)
      .set('cancel_alarm_over_rmp', t.cancel_alarm_over_rmp)
      .set('idling_rpm', t.idling_rpm)
      .set('operation_mode', t.operation_mode)
      .set('rpm_sensor_existence', t.rpm_sensor_existence)
      .set('external_ch1_existence', t.external_ch1_existence)
      .set('external_ch2_existence', t.external_ch2_existence)
      .set('external_ch3_existence', t.external_ch3_existence)
      .set('external_ch4_existence', t.external_ch4_existence)
      .set('external_ch5_existence', t.external_ch5_existence)
      .set('external_ch6_existence', t.external_ch6_existence)
      .set('external_ch7_existence', t.external_ch7_existence)
      .set('external_ch8_existence', t.external_ch8_existence)
      .set('external_ch9_existence', t.external_ch9_existence)
      .set('temperachure_ch1_existence', t.temperachure_ch1_existence)
      .set('temperachure_ch2_existence', t.temperachure_ch2_existence)
      .set('temperachure_ch3_existence', t.temperachure_ch3_existence)
      .set('analog_sensor_existence', t.analog_sensor_existence)
      .set('fuel_analog_sensor_existence', t.fuel_analog_sensor_existence)
      .set('product_model', t.product_model)
      .where("vehicle_code='" + vehicle_code + "'").toString();

  //  var sql = sql
 //   console.log(sql.toString());

    _iexcute(sql, function (r) {
        //debugger;
         console.log(r);
         callback(r);
         return;
    });
}
  
function get_left_comlumn(vehicle_code,cb) 
{
    var sql=' ';
    sql += "  SELECT ";
    sql += "mv.vehicle_code";
    sql += ",mvd.sim1_communication_id";
    sql += ",md.threshhold_of_over_speed";
    sql += ",md.low_speed_area_threshold_of_over_rpm";
    sql += ",md.high_speed_area_threshold_of_over_rpm";
    sql += ",md.constant_speed_to_check";
    sql += ",md.threshold_of_rapid_start";
    sql += ",md.threshold_of_rapid_accel";
    sql += ",md.threshold_of_rapid_decel";
    sql += ",md.cancel_alarm_over_rmp";

    sql += ",md.external_ch1_existence";
    sql += ",md.external_ch2_existence";
    sql += ",md.external_ch3_existence";
    sql += ",md.external_ch4_existence";
    sql += ",md.external_ch5_existence";
    sql += ",md.external_ch6_existence";
    sql += ",md.external_ch7_existence";
    sql += ",md.external_ch8_existence";
    sql += ",md.external_ch9_existence";
    sql += ",md.temperachure_ch1_existence";
    sql += ",md.temperachure_ch2_existence";
    sql += ",md.temperachure_ch3_existence";
    sql += ",md.analog_sensor_existence";
    sql += ",md.fuel_analog_sensor_existence";


    sql += ",mx.idling_rpm";
    sql += ",mx.operation_mode";
    sql += ",mx.rpm_sensor_existence";
    sql += ",mx.product_model";


    sql += " FROM master_vehicle mv  ";
    sql += " left join master_vehicle_device_management mvd on(mv.vehicle_device_serial_no = mvd.vehicle_device_serial_no) ";
    sql += " left JOIN master_company mc on mv.company_code = mc.company_code ";
    sql += " left join master_device_setting md on(mvd.device_setting_code_device_setting = md.device_setting_code) ";
    sql += " left join master_device_setting mx on(mvd.device_setting_code = mx.device_setting_code) ";
    sql += " WHERE mv.vehicle_code="+utl.sqote(vehicle_code)+" ";

    _query_ar(sql, function (res) {
        cb(res);
        return;
    });
}

function start()
{
    console.log('start program '+utcp.now());
    /**/

 
    get_service_index(function (res_db)
    {
        console.log(res_db);

        /* */
            if (res_db.length > 0)
            {
                var service_index_no = res_db[0]['service_index_no'];
                console.log('service_index_no ' + service_index_no)
                set_flag3(service_index_no);

                var struc = new struct_service_index();
               // debugger;
                async.eachSeries(res_db, function (row, next)
                {
                    var vehicle_code = row.vehicle_code;
                    var z_sec = 'z' + vehicle_code + 'sec';
                    var z_his = 'z' + vehicle_code + 'history';//'z10000007history';//
                    var start_time = row.start_time;//'2014-12-15 00:00:00'; //
                    var end_time = row.end_time;// '2014-12-16 21:55:38'; //
                    //  var eval_criterion_code = '01';
                var speed_setting = 0
                debugger;
                get_constant_speed(vehicle_code, function (_speed_setting) {
                    if (_speed_setting.length > 0) { 
                        speed_setting = _speed_setting[0]["constant_speed_to_check"];
                    }
                
                       
                    });

                    get_vehicle_setting(vehicle_code, function (res_setting)
                    {
                        //console.log(res_setting);
                        if (res_setting.length > 0)
                        {
                            //debugger;
                            var eval_criterion_code = res_setting[0].eval_standard_code;

                       
                            var para = { 'tb_sec': z_sec, 'tb_his': z_his, 'start_time': start_time, 'end_time': end_time, 'setting': '', 'vehicle_code': vehicle_code, 'speed_setting': speed_setting, 'service_index_no': service_index_no };
                            get_selection_io(eval_criterion_code, function (res)
                            {
                                //debugger;
                                //  console.log(res);
                                para.setting = res;

                                    iMain(para, function (res) { //para_test
                                        //debugger;
                                        calculate_data_sec(para, res, struc, function (rr) {
                                            //  console.log(rr);

                                            main_cal_eval(eval_criterion_code, rr, function (struc)
                                            {
                                                //debugger;
                                                //  console.log(struc);
                                                get_left_comlumn(vehicle_code, function (rows)
                                                {
                                                    debugger;
                                                    if (rows.length > 0)
                                                    {
                                                        update_service_index(para, struc, rows[0], function (is_update) {
                                                            console.log('update ' + is_update);
                                                        });
                                                    }
                                                    else
                                                    {
                                                        console.log('not found vehicle_code ' + vehicle_code);
                                                    }

                                                });
                                          
                                            });

                                            //
                                        });


                                        //  console.log(struc);
                                        //  next();
                                    }, function () {

                                        //  console.log(struc);
                                    });
                           
                            });

                            //var para_test = { 'tb_sec': 'z10000013sec', 'start_time': '2012-06-10 07:04:54', 'end_time': '2012-06-10 18:31:38' };

                        }
                        else
                        {
                            console.log('setting config no data');
                        }

                    });

                });
            }
            else {
                console.log('data not found');
            }
       
    });
    
}

function set_flag3(service_index_no)
{
   var sql = squel.update()
  .table('service_index')
  .set('report_flag','3')
  .where("service_index_no='" + service_index_no + "'")
  .toString();

   _iexcute(sql, function (r) {
       console.log('set_flag3 '+r);
   });
}

exports.iMain = iMain;
exports.start = start;

/**/
function rerun_update()
{
    // console.log(sec2hhmmss('465'));
   // debugger;

    var sql = "SELECT DISTINCT vehicle_code FROM service_index  WHERE threshhold_of_over_speed IS NULL";

    _query_ar(sql, function (res_db)
    {
        //debugger;
        async.eachSeries(res_db, function (row, next)
        {
            var vehicle_code = row.vehicle_code;
            get_left_comlumn(vehicle_code, function (rows)
            {
                //debugger;
                if (rows.length > 0)
                {
                    //  console.log();
                    test_set_left_column(vehicle_code, rows[0], function (is_ok) {
                        next();
                    });
                } else {
                    next();

                }

            });
        });
       
     
    });

    // var vehicle_code ='11223344';
   

    /*
  var a = "c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600";

 var b = "c600,c600,c600,c600,c600,c600,c600,c600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,8600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600,c600";
   // var a = "c600,8600,c600";
 //   var b = "c600,c600,c600";
   a = a.split(',')
  b = b.split(',');

var xx = _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
console.log(xx);

  var res = _.difference([a], [b]);
  console.log(res);
    //  decode_io(io);
 //   start();
    //#region
    //console.log( unxdate_to_ndate('20141221081633'));
    // console.log( sec2hhmmss('1865'));

    // var driving_time_sec = '2233';
    //  var item_code = '04';
   //var eva_creteria = '02';
    //var value = 76;
    //cal_evaluate(value, eva_creteria, item_code.maximum_speed, function (res) {
    //    debugger;
    //    console.log(res);
    //});
    //debugger;
    //  console.log(  Evarank(61, 165));
    //#endregion

   //get_selection_io(eva_creteria, function (res) {
   //    debugger;
   //    console.log(res);
   //});
   */
}


//#region query result
/*

SELECT 
transit_time
,max_speed
,over_speed_count
,over_speed_time
,over_rpm_count
,over_rpm_time
,sudden_start_count as start_abruptly
,deceleration_count 
,acceleration_count
,total_idling_time
,max_continuous_driving_time 
,dangerous_sign_count
,safe_driving_point 
,eco_driving_point 
,overall_driving_point 
,eval_point_select_item1
,eval_point_select_item2
,eval_point_select_item3
, eval_point_sign_of_danger
, eval_rank_sign_of_danger
 FROM service_index 
WHERE service_index_no='12'

DECLARE @TimeinSecond INT
SET @TimeinSecond = 86399 -- Change the seconds
SELECT RIGHT('0' + CAST(@TimeinSecond / 3600 AS VARCHAR),2) + ':' +
RIGHT('0' + CAST((@TimeinSecond / 60) % 60 AS VARCHAR),2)  + ':' +
RIGHT('0' + CAST(@TimeinSecond % 60 AS VARCHAR),2)

*/



//#endregion

//#region
/*
SELECT manufacturer_code
,threshhold_of_over_speed
,duration_of_over_speed
,low_speed_area_duration_of_over_rpm
,low_speed_area_threshold_of_over_rpm
,high_speed_area_duration_of_over_rpm
,high_speed_area_threshold_of_over_rpm
,constant_speed_to_check
,threshold_of_rapid_start
,threshold_of_rapid_accel
,threshold_of_rapid_decel
,idling_rpm
,rpm_sensor_existence
,external_ch1_existence,external_ch2_existence,external_ch3_existence,external_ch4_existence
,external_ch5_existence,external_ch6_existence,external_ch7_existence,external_ch8_existence
,external_ch9_existence
,analog_ch1_existence,analog_ch2_existence,analog_ch3_existence,analog_ch4_existence
FROM service_index
*/
//#endregion