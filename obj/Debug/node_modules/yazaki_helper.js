var bigInt = require("big-integer");
var timespan = require('timespan');
var _ = require('underscore');
var moment = require('moment');
var crypto = require('crypto');

var utl = require('Utility.js');
var utcp = require('Utility_tcp.js');
var request = require('request');


//var ifsize = require('iGet_filesize.js');

function prepare_io(io_sec) {

    //   var buf = io_sec;//"1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0";
    //   buf = _.without(buf, ' ');
    // buf = _.without(buf, ',');
    var buf = io_sec.split(',');


    var split = function (arr) {
        var splitHelper = function (arr, odd, even) {
            if (arr.length == 0) {
                return { odd: odd, even: even };
            }
            odd.push(arr.splice(0, 1)[0]);
            arr[0] && even.push(arr.splice(0, 1)[0]);
            return splitHelper(arr, odd, even);
        };
        return splitHelper(arr, [], []);
    };

    buf = split(buf);

    var row = [];
    for (var i = 0; i < buf.odd.length; i++) {

        var hbit = utl.zeroPad(parseInt(buf.odd[i], 16).toString(2), 8);
        var lbit = utl.zeroPad(parseInt(buf.even[i], 16).toString(2), 8);
        var r = hbit + '' + lbit;
        r = r.split('') //split every char
      //  r = r[7] + r[0] + r[1] + r[2] + r[3] + r[4] + r[5] + r[6] + r[15] + r[14] + r[13] + r[8] + r[9] + r[10] + r[11] + r[12];
        r =  r[7] + r[6] + r[5] + r[4] + r[3] + r[2] + r[1] + r[0] + r[15] + r[14] + r[13] + r[12] + r[11] + r[10] + r[9] + r[8];
        var x = utl.bin2hex(r);
        row.push(x);
        // 1 000000000 00000
        //1000 0000 0000 0000
    }

    // debugger;
    // console.log(row.join(","))
    var r = row.join(",");
    return r;

}


function build_date(p) {
    //  var p = new Array();
    var now = new Date();
    var year = now.getFullYear().toString()
    var yp = year.substr(2, 2);//2014 ==> 14
    // var year_part = nbuf[18].toString(); //year 14 
    // 21-11-14 54:28:8
    var date = ' ';
    if (yp == p[2]) {
        //p[0] = year
        //p[1] = nbuf[17].toString() //month
        //p[2] = nbuf[16].toString() //day
        //p[3] = nbuf[19].toString() //hr
        //p[4] = nbuf[20].toString() //min
        //p[5] = nbuf[21].toString(); //sec

        date = new Date(year, p[1] - 1, p[0], p[5], p[4], p[3]);
        var idate = utl.format_date(date);
        var vdate = utl.is_valid_date(idate);

        if (vdate) {
            date = utl.format_time(date);
        }
        else {
            console.log('fn build_date time format error!')
        }

    }
    return date;
}



//decode back from byte to string
function rebuild(size, bytes) {

    var long = bigInt();
    for (var c = 0; c < bytes.length; c++) {
        // console.log(bytes[c]+'  '+long);
        if (c > 0)
            long = bigInt(long).shiftLeft(8)
        long = bigInt(long).or(bytes[c]);
        // long = long << 8;
        // long = long | bytes[c];
    }
    return long.toString();
}

function build_encode_(size, data) {
    var long = bigInt(data);
    var b = new Buffer(size);
    for (var c = size - 1; c >= 0; c--) {
        b[c] = bigInt(long).and(0xFF);
        long = bigInt(long).shiftRight(8)
    }
    return JSON.stringify(b);
}

//decode from string to byte
function build_encode(size, data) {
    var long = bigInt(data);
    var b = new Buffer(size);
    for (var c = size - 1; c >= 0; c--) {
        b[c] = bigInt(long).and(0xFF);
        long = bigInt(long).shiftRight(8)
    }
    return b;
    //var a = JSON.stringify(b);
    //if (a.length > 0) {
    //   return a.substring(1, a.length - 1);
    //}

}

function latlon(l_int, l_float) {
    var l = parseInt(l_int) + parseInt(l_float) / 1000000.0;
    return l
}

//v0.10.32  for develop
//function set_json(data) {
//    return JSON.stringify(data).substr(1, JSON.stringify(data).length - 2);
//}


//fix problem version v0.12.3 real_server
function set_json(data) {
    //"type":"Buffer","data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    var x = JSON.stringify(data);
     x = JSON.parse(x);
     x   = x.data.join(',')
    return x;
}

function leftPad(str, length) {
    str = str == null ? '' : String(str);
    length = ~~length;
    pad = '';
    padLength = length - str.length;

    while (padLength--) {
        pad += '0';
    }

    return pad + str;
}

function toBinary(Decimal) {
    var bnum = 0, bexp = 1, digit = 0, bsum = 0;
    while (Decimal > 0) {
        digit = Decimal % 2;
        Decimal = Math.floor(Decimal / 2);
        bsum = bsum + digit * bexp;
        bexp = bexp * 10;
    }
    return (bsum);
}


function decode_io(io_sec) {
    var buf = io_sec.split(',');
    var row = [];
    for (var i = 0; i < buf.length; i++) {
        var r = utl.zeroPad(parseInt(buf[i], 16).toString(2), 8);
        row.push(r);
    }
    var r = row.join(",");
    return r;
}



//++++++ Thank you for P'Mark support ++++++++ // ('010001010', '010000000'); //
function mark_9_bit(cur_io, next_io) { // ('1001', '1000'); //
    var x = parseInt(cur_io, 2);	// a = 10
    var y = parseInt(next_io, 2);	// b = 12
    var c = (x & ~y).toString(2);    	// ~((a & b) | (~a)).toString(2);    		        // a XOR b returns dec = 6, binary = 0110
    //console.log(c);
    return utl.zeroPad(c, 9);
}

//http://bateru.com/news/2011/03/javascript-binary-operations-the-easy-way/

function diff_second(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    //var diff = ts.totalMinutes().toFixed(2);
    //var diff2 = ts.totalDays().toFixed(2);
    var allsec = ts.totalSeconds();
    // console.log(allsec);
    return allsec;
}

function diff_day(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    //var diff = ts.totalMinutes().toFixed(2);
    var day = parseInt(ts.totalDays());

    // console.log(allsec);
    return day;
}

function diff_min(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var min = parseInt(ts.totalMinutes());
    // var day = parseInt(ts.totalDays());

    // console.log(allsec);
    return min;
}

function total_second(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var allsec = ts.totalSeconds();
    return allsec;
}

function total_minute_loop(from_date, to_date) {
    var d1 = new Date(from_date); //'2014-12-04 09:22:10'
    var d2 = new Date(to_date);//'2014-12-04 09:23:13'
    var ts = timespan.fromDates(d1, d2);
    var allmin = parseInt(ts.totalMinutes()) + 1;
    return allmin;
}

function add_second(from_date, sec) {
    //2014-12-04 21:52:57
    var t = dateAdd(from_date, 'second', sec);
    t = utl.format_time(t);
    return t;
}

function dateAdd(date, interval, units) {
    var ret = new Date(date); //don't change original date
    switch (interval.toLowerCase()) {
        case 'year': ret.setFullYear(ret.getFullYear() + units); break;
        case 'quarter': ret.setMonth(ret.getMonth() + 3 * units); break;
        case 'month': ret.setMonth(ret.getMonth() + units); break;
        case 'week': ret.setDate(ret.getDate() + 7 * units); break;
        case 'day': ret.setDate(ret.getDate() + units); break;
        case 'hour': ret.setTime(ret.getTime() + units * 3600000); break;
        case 'minute': ret.setTime(ret.getTime() + units * 60000); break;
        case 'second': ret.setTime(ret.getTime() + units * 1000); break;
        default: ret = undefined; break;
    }
    return ret;
}

function format_unix_date(dt, format) {
    return moment(dt).format(format);
}

function sec2hhmmss(sec) {
    var ts = timespan.fromSeconds(sec); //90
    //debugger;
    //console.log(ts.seconds()); // 30
    //console.log(ts.minutes()); // 1
    //var s = 
    var s = ts.hours + ':' + ts.minutes + ':' + ts.seconds;
    return s;
}

function HOUR(sec) {
    var ts = timespan.fromSeconds(sec);
    return ts.hours;
}

function MINUTE(sec) {
    var ts = timespan.fromSeconds(sec);
    return ts.minutes;
}

function SECOND(sec) {
    var ts = timespan.fromSeconds(sec);
    return ts.seconds;
}

function allsec_fromHHMM() {

}

//http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object

function random(howMany, chars) {
    chars = chars
        || "0123456789";
    var rnd = crypto.randomBytes(howMany)
        , value = new Array(howMany)
        , len = chars.length;

    for (var i = 0; i < howMany; i++) {
        value[i] = chars[rnd[i] % len]
    };

    return value.join('');
}

function append_byte(data) {
    var p = new Buffer(1);
    p[0] = parseInt(data);
    return p
}

var get_now = {
    //now: function () { return this.n; }
    now: function () { return moment().format('YYYY-MM-DD HH:mm:ss.SSS'); }
};

function inow() {
    var dt = get_now.now();
    var res = moment(dt).format("YYYY-MM-DD HH:mm:ss");
    return res;
}

function build_date_server(datetime) {
    // debugger;
    var p = new Buffer(6);
    //  var p = new Array();
    var dt = datetime.split(' ');
    var a1 = dt[0].split('-')
    var a2 = dt[1].split(':')


    p[0] = parseInt(a1[2]); //day 
    p[1] = parseInt(a1[1]);//month
    p[2] = parseInt(a1[0].substr(2, 2)); //year 14 
    p[3] = parseInt(a2[2]); //sec
    p[4] = parseInt(a2[1]); //min
    p[5] = parseInt(a2[0]); //hr

    //DD MM YYYY ss mm hh
    //  var r_time = p[2] + ',' + p[1] + ',' + p[0] + ',' + p[5] + ',' + p[4] + ',' + p[3];
    //  var r_time2 =  p[2] +''+ p[1] + '' + p[0] + '' + p[5] + '' + p[4] + '' + p[3];
    // var nbuf = new Buffer(r_time2);
    // var x = nbuf.toString('ascii');
    //  return r_time
    //#endregion
    return p;
}

function iget_data(nbuf, start, len, cb) {
    //var start = 3;
    //var len = 8;
    var end = start + len;
    var b = nbuf.slice(start, end)
    if (len == 1) {
        b = b[0];
    }

    utl.is_undefined(b, function (is_true) {
        if (is_true) {
            b = ' ';
            var data = { 'buffer': b, 'next': end, 'size': len };
            cb(data)
            return;
        } else {
            var data = { 'buffer': b, 'next': end, 'size': len };
            cb(data)
            return;
        }
    });

}


function getFilesizeInBytes(file_path,cb)
{
   // var request = require('request');
    //request(file_path, function (err, res, body) {
    //   debugger;
    //    cb(res.headers["content-length"]);
    //    return;
    //    //console.log(res.headers);
    //});
    ifsize.getFilesizeInBytes(file_path, function (res) {
        cb(res);
        return;
    });
}


//http://blog.tompawlak.org/split-string-tokens-defined-length-javascript
function split_by_len(input, len) {
    return input.match(new RegExp('.{1,' + len + '}(?=(.{' + len + '})+(?!.))|.{1,' + len + '}$', 'g'))
}

//http://blog.tompawlak.org/array-conversion-2-dimensional-javascript
function arrayTo2DArray2(list, howMany) {
    var idx = 0; result = [];

    while (idx < list.length) {
        if (idx % howMany === 0) result.push([]);
        result[result.length - 1].push(list[idx++]);
    }

    return result;
}


function append(bl, data) {
    return bl.append(new Buffer(data))
}


function make_ar_day(from_date, to_date) {
    // debugger;
    var iday = diff_day(from_date, to_date);
    var ar = [];
    if (iday > 0) {
        for (var i = 0; i <= iday; i++) {
            if (ar.length == 0) {
                ar.push(format_unix_date(dateAdd(from_date, 'day', 1), 'YYYYMMDD'));
            } else {
                var next_day = i + 1;
                ar.push(format_unix_date(dateAdd(from_date, 'day', next_day), 'YYYYMMDD'));
            }

        }
    } else {
        ar.push(format_unix_date(from_date, 'YYYYMMDD'));
    }
    return ar;
}


/*
var input = ['a', 'b', 'c', 'd', 'e', 'f', 
             'g', 'h', 'i', 'j', 'k', 'l', 
             'm', 'n', 'o', 'p', 'q', 'r'];
console.log(arrayTo2DArray2(input, 5))
Would give output like:

[ [ 'a', 'b', 'c', 'd', 'e' ],
  [ 'f', 'g', 'h', 'i', 'j' ],
  [ 'k', 'l', 'm', 'n', 'o' ],
  [ 'p', 'q', 'r' ] ]
*/


exports.split_by_len = split_by_len;

exports.getFilesizeInBytes = getFilesizeInBytes;

exports.iget_data = iget_data;
exports.build_date_server = build_date_server;
exports.build_date = build_date;
exports.rebuild = rebuild;
exports.build_encode = build_encode;
exports.format_unix_date = format_unix_date;
exports.random = random;
exports.append_byte = append_byte;
exports.inow = inow;

exports.diff_second = diff_second;

exports.set_json = set_json;
exports.allsec_fromHHMM = allsec_fromHHMM;
exports.append = append;

exports.make_ar_day = make_ar_day;
exports.total_minute_loop = total_minute_loop;

exports.dateAdd = dateAdd;
exports.add_second = add_second;


//setInterval(function () {
//  console.log( random(9));

//}, 1000);

//split_by_len
//    

//#region split_by_len
/*
setTimeout(function ()
{
    debugger;
    // add_master_yazaki_to_tcp('8966003514500742999', 'yazaki@2015.com');
    var t = "cac7d1cab4d5aad2c7e2c5a120202020202020202020202020202020202020202020202020202020";
    var ar = split_by_len(t, 2);

}, 1000);
*/
//#endregion